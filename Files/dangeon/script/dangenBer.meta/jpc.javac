class dangenBer { //[I-S]LN=0;[I-E]
  public ObjectFile walls, doors; //[I-S]LN=1;[I-E]
 //[I-S]LN=2;[I-E]
  public void UpdateRoom(boolean[] status, String txt, SpatialObject objs, VertexFile walls, VertexFile doors) { //[I-S]LN=3;[I-E]
    for (int i = 0; i < status.length; i++) { //[I-S]LN=4;[I-E]
      VertexFile obj = status[i] ? doors : walls; //[I-S]LN=5;[I-E]
      float rot = (i == 0) ? -90 : (i == 1) ? 180 : (i == 2) ? 90 : 0; //[I-S]LN=6;[I-E]
      SpatialObject ob = new SpatialObject("name" + rot); //[I-S]LN=7;[I-E]
      if (i == 3 || i == 2) { //[I-S]LN=8;[I-E]
        ob.setTag("wall"); //[I-S]LN=9;[I-E]
        ob.getPhysics().setPhysicsEntity(new Staticbody()); //[I-S]LN=10;[I-E]
      } //[I-S]LN=11;[I-E]
      ob.addComponent(new ModelRenderer()); //[I-S]LN=12;[I-E]
      ob.addComponent(new Collider(3)); //[I-S]LN=13;[I-E]
      ModelRenderer model = ob.findComponent("ModelRenderer"); //[I-S]LN=14;[I-E]
      model.setMaterial(new Material()); //[I-S]LN=15;[I-E]
      model.material.setShader("PBR/Standard"); //[I-S]LN=16;[I-E]
      model.setModelFile(obj); //[I-S]LN=17;[I-E]
      model.material.setReceiveLight(false); //[I-S]LN=18;[I-E]
      Collider col = ob.findComponent("Collider"); //[I-S]LN=19;[I-E]
      col.setVertexFile(obj); //[I-S]LN=20;[I-E]
      ob.setParent(objs); //[I-S]LN=21;[I-E]
      Quaternion rots = new Quaternion(); //[I-S]LN=22;[I-E]
      rots.setFromEuler(new Vector3(0, rot, 0)); //[I-S]LN=23;[I-E]
      ob.setRotation(rots); //[I-S]LN=24;[I-E]
      if (i == 3) ob.addComponent(new checkPhysicsL()); //[I-S]LN=25;[I-E]
      if (i == 2) ob.addComponent(new checkPhysicsR()); //[I-S]LN=26;[I-E]
    } //[I-S]LN=27;[I-E]
  } //[I-S]LN=28;[I-E]
 //[I-S]LN=29;[I-E]
  public class checkPhysicsL extends Component { //[I-S]LN=30;[I-E]
    float t = 0; //[I-S]LN=31;[I-E]
 //[I-S]LN=32;[I-E]
    void repeat() { //[I-S]LN=33;[I-E]
      if ((t += 0.01f) > .5f) return; //[I-S]LN=34;[I-E]
      Vector3 my = myObject.globalPosition; //[I-S]LN=35;[I-E]
      Vector3 myp = myObject.position; //[I-S]LN=36;[I-E]
      LaserHit hit = new Laser().trace(new Vector3(my.x, my.y + 2, my.z + 5), new Vector3(myp.x + 1, myp.y, myp.z), 8f); //[I-S]LN=37;[I-E]
      if (hit == null || "wall".equals(hit.getObject().tag)) return; //[I-S]LN=38;[I-E]
      Console.log(hit.getObject().name); //[I-S]LN=39;[I-E]
      myObject.destroy(); //[I-S]LN=40;[I-E]
    }  //[I-S]LN=41;[I-E]
  } //[I-S]LN=42;[I-E]
 //[I-S]LN=43;[I-E]
  public class checkPhysicsR extends Component { //[I-S]LN=44;[I-E]
    float t = 0; //[I-S]LN=45;[I-E]
 //[I-S]LN=46;[I-E]
    void repeat() { //[I-S]LN=47;[I-E]
      if ((t += 0.01f) > .5f) return; //[I-S]LN=48;[I-E]
      Vector3 my = myObject.globalPosition; //[I-S]LN=49;[I-E]
      LaserHit hit = new Laser().trace(new Vector3(my.x + 5, my.y + 2, my.z), myObject.right(), 8f); //[I-S]LN=50;[I-E]
      //if (hit == null || hit.getObject().tag.equals(hit.getObject().tag)) return; //[I-S]LN=51;[I-E]
      if (hit == null || "wall".equals(hit.getObject().tag)) return; //[I-S]LN=52;[I-E]
      Console.log(hit.getObject().getName()); //[I-S]LN=53;[I-E]
      myObject.destroy(); //[I-S]LN=54;[I-E]
    } //[I-S]LN=55;[I-E]
  } //[I-S]LN=56;[I-E]
} //[I-S]LN=57;[I-E]