package JAVARuntime;

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.text.*;
import java.net.*;
import java.math.*;
import java.io.*;
import java.nio.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:dangenBer
class dangenBer extends Component { //[I-S]LN=0;[I-E]
  public ObjectFile walls, doors; //[I-S]LN=1;[I-E]
 //[I-S]LN=2;[I-E]
  public void UpdateRoom(boolean[] status, String txt, ObjectFile walls, ObjectFile doors) { //[I-S]LN=3;[I-E]
    Console.log(txt + "room Update"); //[I-S]LN=4;[I-E]
    for (int i = 0; i < status.length; i++) { //[I-S]LN=5;[I-E]
      ObjectFile obj = status[i] ? doors : walls; //[I-S]LN=6;[I-E]
      float rot = (i == 0) ? -90 : (i == 1) ? 180 : (i == 2) ? 90 : 0; //[I-S]LN=7;[I-E]
      SpatialObject ob = myObject.instantiate(obj, new Vector3(0, 0, 0)); //[I-S]LN=8;[I-E]
      ob.setParent(myObject); //[I-S]LN=9;[I-E]
      Quaternion rots = new Quaternion(); //[I-S]LN=10;[I-E]
      rots.setFromEuler(new Vector3(0, rot, 0)); //[I-S]LN=11;[I-E]
      ob.setRotation(rots); //[I-S]LN=12;[I-E]
    }  //[I-S]LN=13;[I-E]
  } //[I-S]LN=14;[I-E]
} //[I-S]LN=15;[I-E]