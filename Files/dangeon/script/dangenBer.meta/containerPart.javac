package JAVARuntime;

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.text.*;
import java.net.*;
import java.math.*;
import java.io.*;
import java.nio.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:dangenBer
class dangenBer { //[I-S]LN=0;[I-E]
  public ObjectFile walls, doors; //[I-S]LN=1;[I-E]
 //[I-S]LN=2;[I-E]
  public void UpdateRoom(boolean[] status, String txt, SpatialObject objs, VertexFile walls, VertexFile doors) { //[I-S]LN=3;[I-E]
    for (int i = 0; i < status.length; i++) { //[I-S]LN=4;[I-E]
      VertexFile obj = status[i] ? doors : walls; //[I-S]LN=5;[I-E]
      float rot = (i == 0) ? -90 : (i == 1) ? 180 : (i == 2) ? 90 : 0; //[I-S]LN=6;[I-E]
      SpatialObject ob = new SpatialObject(); //[I-S]LN=7;[I-E]
      if (i == 1 || i == 2) ob.setTag("wall"); //[I-S]LN=8;[I-E]
      ob.addComponent(new ModelRenderer()); //[I-S]LN=9;[I-E]
      ob.addComponent(new Collider(3)); //[I-S]LN=10;[I-E]
      ModelRenderer model = ob.findComponent("ModelRenderer"); //[I-S]LN=11;[I-E]
      model.setMaterial(new Material()); //[I-S]LN=12;[I-E]
model.getMaterial().setShader("PBR/Standard"); //[I-S]LN=13;[I-E]
      model.setModelFile(obj); //[I-S]LN=14;[I-E]
model.getMaterial().setReceiveLight(false); //[I-S]LN=15;[I-E]
      Collider col = ob.findComponent("Collider"); //[I-S]LN=16;[I-E]
      col.setVertexFile(obj); //[I-S]LN=17;[I-E]
      ob.setParent(objs); //[I-S]LN=18;[I-E]
      Quaternion rots = new Quaternion(); //[I-S]LN=19;[I-E]
      rots.setFromEuler(new Vector3(0, rot, 0)); //[I-S]LN=20;[I-E]
      ob.setRotation(rots); //[I-S]LN=21;[I-E]
      if (i == 0 || i == 3) ob.addComponent(new checkPhysics()); //[I-S]LN=22;[I-E]
    } //[I-S]LN=23;[I-E]
  } //[I-S]LN=24;[I-E]
 //[I-S]LN=25;[I-E]
  public class checkPhysics extends Component { //[I-S]LN=26;[I-E]
public     void start() { //[I-S]LN=27;[I-E]
      for (Collision col : myObject.getCollisionList()) { //[I-S]LN=28;[I-E]
        if (col.getOtherObject().getTag().equals("wall")) { //[I-S]LN=29;[I-E]
          col.getOtherObject().destroy(); //[I-S]LN=30;[I-E]
          continue; //[I-S]LN=31;[I-E]
        }  //[I-S]LN=32;[I-E]
      } //[I-S]LN=33;[I-E]
    } //[I-S]LN=34;[I-E]
  } //[I-S]LN=35;[I-E]
} //[I-S]LN=36;[I-E]