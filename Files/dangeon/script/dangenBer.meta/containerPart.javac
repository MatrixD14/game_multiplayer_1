package JAVARuntime;

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.text.*;
import java.net.*;
import java.math.*;
import java.io.*;
import java.nio.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:dangenBer
class dangenBer { //[I-S]LN=0;[I-E]
  private HashSet<Long> gerar = new HashSet<Long>(); //[I-S]LN=1;[I-E]
  private Texture map; //[I-S]LN=2;[I-E]
 //[I-S]LN=3;[I-E]
  public void UpdateRoom(int[] status, String txt, SpatialObject objs, VertexFile walls, VertexFile doors, Color color) { //[I-S]LN=4;[I-E]
    String[] name = txt.split("\\s+"); //[I-S]LN=5;[I-E]
    int cellx = Integer.parseInt(name[0]), cellz = Integer.parseInt(name[1]); //[I-S]LN=6;[I-E]
    int[][] dirs = {{0, 1}, {-1, 0}, {0, -1}, {1, 0}}; //[I-S]LN=7;[I-E]
    for (int i = 0; i < status.length; i++) { //[I-S]LN=8;[I-E]
      if (status[i] == 0) continue; //[I-S]LN=9;[I-E]
      int wx = 2 * cellx + dirs[i][0], wz = 2 * cellz + dirs[i][1]; //[I-S]LN=10;[I-E]
      long key = codKey(wx, wz); //[I-S]LN=11;[I-E]
      // Console.log(key); //[I-S]LN=12;[I-E]
      if (gerar.contains(key)) continue; //[I-S]LN=13;[I-E]
      gerar.add(key); //[I-S]LN=14;[I-E]
 //[I-S]LN=15;[I-E]
      Vertex obj = Vertex.loadFile(status[i] == 1 ? doors : walls); //[I-S]LN=16;[I-E]
      float rot = (i == 0) ? -90 : (i == 1) ? 180 : (i == 2) ? 90 : 0; //[I-S]LN=17;[I-E]
      spawObj(rot, new Point2(0, 0), new Point3(1, 1, 1), color, new SpatialObject(i + txt + key, objs), obj); //[I-S]LN=18;[I-E]
    } //[I-S]LN=19;[I-E]
  } //[I-S]LN=20;[I-E]
 //[I-S]LN=21;[I-E]
  public SpatialObject spawObj(float rot, Point2 pos, Point3 scale, Color color, SpatialObject ob, Vertex obj) { //[I-S]LN=22;[I-E]
    ob.addComponent(new ModelRenderer(obj)); //[I-S]LN=23;[I-E]
    ob.addComponent(new Collider(3)); //[I-S]LN=24;[I-E]
    ModelRenderer model = ob.findComponent("ModelRenderer"); //[I-S]LN=25;[I-E]
    model.setMaterial(new Material()); //[I-S]LN=26;[I-E]
model.getMaterial().setShader("PBR/Standard"); //[I-S]LN=27;[I-E]
model.getMaterial().setReceiveLight(false); //[I-S]LN=28;[I-E]
model.getMaterial().setDiffuse(color); //[I-S]LN=29;[I-E]
    Collider col = ob.findComponent("Collider"); //[I-S]LN=30;[I-E]
    col.setVertex(obj); //[I-S]LN=31;[I-E]
    Quaternion rots = new Quaternion(); //[I-S]LN=32;[I-E]
    rots.setFromEuler(new Vector3(0, rot, 0)); //[I-S]LN=33;[I-E]
    ob.setRotation(rots); //[I-S]LN=34;[I-E]
ob.setPosition(pos.getX(), 0, pos.getY()); //[I-S]LN=35;[I-E]
ob.setScale(scale.getX(), scale.getY(), scale.getZ()); //[I-S]LN=36;[I-E]
    return ob; //[I-S]LN=37;[I-E]
  } //[I-S]LN=38;[I-E]
 //[I-S]LN=39;[I-E]
  public Texture miniMap(List<dangeonGeration.Cell> board, Point2 size, Color[] cor) { //[I-S]LN=40;[I-E]
    map.setMipmapEnabled(false); //[I-S]LN=41;[I-E]
for (int x = 0; x < size.getX(); x++) { //[I-S]LN=42;[I-E]
for (int z = 0; z < size.getY(); z++) { //[I-S]LN=43;[I-E]
dangeonGeration.Cell cellTmp = board.get(x + z * size.getX()); //[I-S]LN=44;[I-E]
int xs = 1 + (size.getX() - x - 1) * 2, zs = 1 + (size.getY() - z - 1) * 2; //[I-S]LN=45;[I-E]
if (cellTmp.vision) map.set(xs, zs, (x == 0 && z == 0) ? cor[0] : (x == (size.getX() - 1) && z == (size.getY() - 1)) ? cor[2] : cor[3]); //[I-S]LN=46;[I-E]
        else map.set(xs, zs, Color.WHITE()); //[I-S]LN=47;[I-E]
      } //[I-S]LN=48;[I-E]
    } //[I-S]LN=49;[I-E]
    map.apply(); //[I-S]LN=50;[I-E]
    return map; //[I-S]LN=51;[I-E]
  } //[I-S]LN=52;[I-E]
 //[I-S]LN=53;[I-E]
  private int oldpx = -1, oldpz = -1; //[I-S]LN=54;[I-E]
 //[I-S]LN=55;[I-E]
  public Texture playermove(List<dangeonGeration.Cell> board, Vector3 m, Point2 size, Point2 offset, Color[] cor) { //[I-S]LN=56;[I-E]
int px = (int) Math.round(m.getX() / offset.getX()), pz = (int) Math.round(m.getZ() / offset.getY()); //[I-S]LN=57;[I-E]
    if (oldpx != -1 && oldpz != -1) { //[I-S]LN=58;[I-E]
dangeonGeration.Cell cellTmp = board.get(oldpx + oldpz * size.getX()); //[I-S]LN=59;[I-E]
Color cors = oldpx == 0 && oldpz == 0 ? cor[0] : (px == (size.getX()) && pz == (size.getY())) ? cor[2] : (cellTmp.vision ? cor[3] : Color.WHITE()); //[I-S]LN=60;[I-E]
map.set(1 + (size.getX() - oldpx - 1) * 2, 1 + (size.getY() - oldpz - 1) * 2, cors); //[I-S]LN=61;[I-E]
    }  //[I-S]LN=62;[I-E]
 //[I-S]LN=63;[I-E]
map.set(1 + (size.getX() - px - 1) * 2, 1 + (size.getY() - pz - 1) * 2, Color.GREEN()); //[I-S]LN=64;[I-E]
    map.apply(); //[I-S]LN=65;[I-E]
    oldpx = px; //[I-S]LN=66;[I-E]
    oldpz = pz; //[I-S]LN=67;[I-E]
    return map; //[I-S]LN=68;[I-E]
  } //[I-S]LN=69;[I-E]
 //[I-S]LN=70;[I-E]
  public void setTexture(int x, int z) { //[I-S]LN=71;[I-E]
    map = new Texture(x, z, true); //[I-S]LN=72;[I-E]
  } //[I-S]LN=73;[I-E]
 //[I-S]LN=74;[I-E]
  private long codKey(int x, int z) { //[I-S]LN=75;[I-E]
    return (((long) x) << 32) | (z & 0xFFFFFFFFL); //[I-S]LN=76;[I-E]
  } //[I-S]LN=77;[I-E]
} //[I-S]LN=78;[I-E]