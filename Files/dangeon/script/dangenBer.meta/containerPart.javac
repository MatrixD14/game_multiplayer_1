package JAVARuntime;

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.text.*;
import java.net.*;
import java.math.*;
import java.io.*;
import java.nio.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:dangenBer
class dangenBer { //[I-S]LN=0;[I-E]
  private HashSet<Long> gerar = new HashSet<Long>(); //[I-S]LN=1;[I-E]
 //[I-S]LN=2;[I-E]
  public void UpdateRoom(int[] status, String txt, SpatialObject objs, VertexFile walls, VertexFile doors) { //[I-S]LN=3;[I-E]
    String[] name = txt.split("\\s+"); //[I-S]LN=4;[I-E]
    int cellx = Integer.parseInt(name[0]), cellz = Integer.parseInt(name[1]); //[I-S]LN=5;[I-E]
    int[][] dirs = {{0, -1}, {-1, 0}, {0, 1}, {1, 0}}; //[I-S]LN=6;[I-E]
    for (int i = 0; i < status.length; i++) { //[I-S]LN=7;[I-E]
      if (status[i] == 0) continue; //[I-S]LN=8;[I-E]
      int wx = 2 * cellx + dirs[i][0], wz = 2 * cellz + dirs[i][1]; //[I-S]LN=9;[I-E]
      long key = codKey(wx, wz); //[I-S]LN=10;[I-E]
      //Console.log(key); //[I-S]LN=11;[I-E]
      if (gerar.contains(key)) continue; //[I-S]LN=12;[I-E]
      gerar.add(key); //[I-S]LN=13;[I-E]
 //[I-S]LN=14;[I-E]
      Vertex obj = Vertex.loadFile(status[i] == 1 ? doors : walls); //[I-S]LN=15;[I-E]
      float rot = (i == 0) ? -90 : (i == 1) ? 180 : (i == 2) ? 90 : 0; //[I-S]LN=16;[I-E]
      spawObj(rot, new Point2(0, 0), new Point3(1, 1, 1), new SpatialObject(txt + key, objs), obj); //[I-S]LN=17;[I-E]
    } //[I-S]LN=18;[I-E]
  }  //[I-S]LN=19;[I-E]
 //[I-S]LN=20;[I-E]
  public SpatialObject spawObj(float rot, Point2 pos, Point3 scale, SpatialObject ob, Vertex obj) { //[I-S]LN=21;[I-E]
    ob.addComponent(new ModelRenderer(obj)); //[I-S]LN=22;[I-E]
    ob.addComponent(new Collider(3)); //[I-S]LN=23;[I-E]
    ModelRenderer model = ob.findComponent("ModelRenderer"); //[I-S]LN=24;[I-E]
    model.setMaterial(new Material()); //[I-S]LN=25;[I-E]
model.getMaterial().setShader("PBR/Standard"); //[I-S]LN=26;[I-E]
model.getMaterial().setReceiveLight(false); //[I-S]LN=27;[I-E]
    Collider col = ob.findComponent("Collider"); //[I-S]LN=28;[I-E]
    col.setVertex(obj); //[I-S]LN=29;[I-E]
    Quaternion rots = new Quaternion(); //[I-S]LN=30;[I-E]
    rots.setFromEuler(new Vector3(0, rot, 0)); //[I-S]LN=31;[I-E]
    ob.setRotation(rots); //[I-S]LN=32;[I-E]
ob.setPosition(pos.getX(), 0, pos.getY()); //[I-S]LN=33;[I-E]
ob.setScale(scale.getX(), scale.getY(), scale.getZ()); //[I-S]LN=34;[I-E]
    return ob; //[I-S]LN=35;[I-E]
  } //[I-S]LN=36;[I-E]
 //[I-S]LN=37;[I-E]
  private long codKey(int x, int z) { //[I-S]LN=38;[I-E]
    return (((long) x) << 32) | (z & 0xFFFFFFFFL); //[I-S]LN=39;[I-E]
  } //[I-S]LN=40;[I-E]
} //[I-S]LN=41;[I-E]
//C-R:dangeonGeration
class dangeonGeration extends Component { //[I-S]LN=0;[I-E]
  public class Cell { //[I-S]LN=1;[I-E]
    public boolean vision = false; //[I-S]LN=2;[I-E]
    public int[] status = new int[] {2, 2, 2, 2}; //[I-S]LN=3;[I-E]
  } //[I-S]LN=4;[I-E]
 //[I-S]LN=5;[I-E]
  public class Rule { //[I-S]LN=6;[I-E]
    public SpatialObject room; //[I-S]LN=7;[I-E]
    public Point2 minPos, maxPos; //[I-S]LN=8;[I-E]
    public boolean obrig; //[I-S]LN=9;[I-E]
 //[I-S]LN=10;[I-E]
    public Rule(SpatialObject room, Point2 minPos, Point2 maxPos) { //[I-S]LN=11;[I-E]
      this.room = room; //[I-S]LN=12;[I-E]
      this.minPos = minPos; //[I-S]LN=13;[I-E]
      this.maxPos = maxPos; //[I-S]LN=14;[I-E]
    } //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
    public int probrabilidade(int x, int z) { //[I-S]LN=17;[I-E]
if (x >= minPos.getX() && x <= maxPos.getX() && z >= minPos.getY() && z <= maxPos.getY()) { //[I-S]LN=18;[I-E]
        return obrig ? 2 : 1; //[I-S]LN=19;[I-E]
      } //[I-S]LN=20;[I-E]
      return 0; //[I-S]LN=21;[I-E]
    } //[I-S]LN=22;[I-E]
  } //[I-S]LN=23;[I-E]
 //[I-S]LN=24;[I-E]
  public Point2 size = new Point2(); //[I-S]LN=25;[I-E]
  public int startPos = 0; //[I-S]LN=26;[I-E]
  public List<Cell> board; //[I-S]LN=27;[I-E]
  public ObjectFile room; //[I-S]LN=28;[I-E]
  public Point2 offset = new Point2(); //[I-S]LN=29;[I-E]
  @Order(idx = 1) //[I-S]LN=30;[I-E]
  public VertexFile walls, doors, chao; //[I-S]LN=31;[I-E]
  private dangenBer roomber; //[I-S]LN=32;[I-E]
  private PerlinNoise noise; //[I-S]LN=33;[I-E]
  private int seed; //[I-S]LN=34;[I-E]
  // public dangeonGeration.Rule[] rooms = new dangeonGeration.Rule[2]; //[I-S]LN=35;[I-E]
 //[I-S]LN=36;[I-E]
public   void start() { //[I-S]LN=37;[I-E]
    roomber = new dangenBer(); //[I-S]LN=38;[I-E]
    noise = new PerlinNoise(10); //[I-S]LN=39;[I-E]
    armGerador(); //[I-S]LN=40;[I-E]
  } //[I-S]LN=41;[I-E]
 //[I-S]LN=42;[I-E]
  public void gerationDange() { //[I-S]LN=43;[I-E]
StringBuilder name = new StringBuilder(size.getX() + size.getY()); //[I-S]LN=44;[I-E]
    Instant start = Instant.now(); //[I-S]LN=45;[I-E]
for (int x = 0; x < size.getX(); x++) { //[I-S]LN=46;[I-E]
for (int z = 0; z < size.getY(); z++) { //[I-S]LN=47;[I-E]
Cell cellTmp = board.get(x + z * size.getX()); //[I-S]LN=48;[I-E]
 //[I-S]LN=49;[I-E]
        if (cellTmp.vision) { //[I-S]LN=50;[I-E]
          name.setLength(0); //[I-S]LN=51;[I-E]
SpatialObject newRoom = myObject.instantiate(room, new Vector3(x * offset.getX(), 0, -z * offset.getY())); //[I-S]LN=52;[I-E]
          name.append(x).append(" ").append(z); //[I-S]LN=53;[I-E]
          /*SpatialObject newRoom = SpatialObject.loadFile(room); //[I-S]LN=54;[I-E]
          newRoom.setPosition(x * offset.x, 0, -z * offset.y);*/ //[I-S]LN=55;[I-E]
          if (roomber != null) { //[I-S]LN=56;[I-E]
            // roomber.spawObj(0, new Point2(0, 0), new Point3(1, 0, 1), new SpatialObject(name.toString(), newRoom), Vertex.loadFile(chao)); //[I-S]LN=57;[I-E]
            roomber.UpdateRoom(cellTmp.status, name.toString(), newRoom, walls, doors); //[I-S]LN=58;[I-E]
          } //[I-S]LN=59;[I-E]
          newRoom.setName(name.toString()); //[I-S]LN=60;[I-E]
        } //[I-S]LN=61;[I-E]
      } //[I-S]LN=62;[I-E]
    } //[I-S]LN=63;[I-E]
    Instant end = Instant.now(); //[I-S]LN=64;[I-E]
    Duration timeElapsed = Duration.between(start, end); //[I-S]LN=65;[I-E]
    Console.log(timeElapsed.toMillis()); //[I-S]LN=66;[I-E]
  }  //[I-S]LN=67;[I-E]
 //[I-S]LN=68;[I-E]
  public void armGerador() { //[I-S]LN=69;[I-E]
    board = new LinkedList<Cell>(); //[I-S]LN=70;[I-E]
for (int z = 0; z < size.getY(); z++) { //[I-S]LN=71;[I-E]
for (int x = 0; x < size.getX(); x++) { //[I-S]LN=72;[I-E]
        board.add(new Cell()); //[I-S]LN=73;[I-E]
      } //[I-S]LN=74;[I-E]
    } //[I-S]LN=75;[I-E]
    int currentCell = startPos; //[I-S]LN=76;[I-E]
    Deque<Integer> path = new ArrayDeque<Integer>(); //[I-S]LN=77;[I-E]
    int k = 0; //[I-S]LN=78;[I-E]
    while (k < 1000) { //[I-S]LN=79;[I-E]
      k++; //[I-S]LN=80;[I-E]
      board.get(currentCell).vision = true; //[I-S]LN=81;[I-E]
      if (currentCell == board.size() - 1) break; //[I-S]LN=82;[I-E]
      List<Integer> neighbors = checkNeighbors(currentCell); //[I-S]LN=83;[I-E]
 //[I-S]LN=84;[I-E]
      if (neighbors.size() > 0) { //[I-S]LN=85;[I-E]
        float noises = noise.noise(currentCell + seed + k, 0); //[I-S]LN=86;[I-E]
        int idx = (int) (((noises + 1) * .5f) * neighbors.size()); //[I-S]LN=87;[I-E]
        if (idx >= neighbors.size()) idx = neighbors.size() - 1; //[I-S]LN=88;[I-E]
        if (idx < 0) idx = 0; //[I-S]LN=89;[I-E]
        if (neighbors.size() == 0) { //[I-S]LN=90;[I-E]
          if (path.size() == 0) break; //[I-S]LN=91;[I-E]
          else currentCell = path.pop(); //[I-S]LN=92;[I-E]
        } else { //[I-S]LN=93;[I-E]
          path.push(currentCell); //[I-S]LN=94;[I-E]
          int newCell = neighbors.get(idx); //[I-S]LN=95;[I-E]
          if (newCell > currentCell) { //[I-S]LN=96;[I-E]
            if (newCell - 1 == currentCell) { //[I-S]LN=97;[I-E]
              board.get(currentCell).status[3] = 1; //[I-S]LN=98;[I-E]
              currentCell = newCell; //[I-S]LN=99;[I-E]
              board.get(currentCell).status[1] = 1; //[I-S]LN=100;[I-E]
            } else { //[I-S]LN=101;[I-E]
              board.get(currentCell).status[2] = 1; //[I-S]LN=102;[I-E]
              currentCell = newCell; //[I-S]LN=103;[I-E]
              board.get(currentCell).status[0] = 1; //[I-S]LN=104;[I-E]
            } //[I-S]LN=105;[I-E]
          } else { //[I-S]LN=106;[I-E]
            if (newCell + 1 == currentCell) { //[I-S]LN=107;[I-E]
              board.get(currentCell).status[1] = 1; //[I-S]LN=108;[I-E]
              currentCell = newCell; //[I-S]LN=109;[I-E]
              board.get(currentCell).status[3] = 1; //[I-S]LN=110;[I-E]
            } else { //[I-S]LN=111;[I-E]
              board.get(currentCell).status[0] = 1; //[I-S]LN=112;[I-E]
              currentCell = newCell; //[I-S]LN=113;[I-E]
              board.get(currentCell).status[2] = 1; //[I-S]LN=114;[I-E]
            } //[I-S]LN=115;[I-E]
          } //[I-S]LN=116;[I-E]
        } //[I-S]LN=117;[I-E]
      } //[I-S]LN=118;[I-E]
    } //[I-S]LN=119;[I-E]
    gerationDange(); //[I-S]LN=120;[I-E]
  } //[I-S]LN=121;[I-E]
 //[I-S]LN=122;[I-E]
  public List<Integer> checkNeighbors(int cell) { //[I-S]LN=123;[I-E]
    List<Integer> neighbors = new LinkedList<Integer>(); //[I-S]LN=124;[I-E]
 //[I-S]LN=125;[I-E]
if ((cell - size.getX()) > 0 && !board.get(cell - size.getX()).vision) neighbors.add(cell - size.getX()); //[I-S]LN=126;[I-E]
 //[I-S]LN=127;[I-E]
if ((cell + size.getX()) < board.size() && !board.get(cell + size.getX()).vision) neighbors.add(cell + size.getX()); //[I-S]LN=128;[I-E]
 //[I-S]LN=129;[I-E]
if (((cell + 1) % size.getX()) != 0 && !board.get(cell + 1).vision) neighbors.add(cell + 1); //[I-S]LN=130;[I-E]
 //[I-S]LN=131;[I-E]
if ((cell % size.getX()) != 0 && !board.get(cell - 1).vision) neighbors.add(cell - 1); //[I-S]LN=132;[I-E]
    return neighbors; //[I-S]LN=133;[I-E]
  } //[I-S]LN=134;[I-E]
 //[I-S]LN=135;[I-E]
  public void setSeed(int seed) { //[I-S]LN=136;[I-E]
    this.seed = seed; //[I-S]LN=137;[I-E]
  } //[I-S]LN=138;[I-E]
 //[I-S]LN=139;[I-E]
  public int getSeed() { //[I-S]LN=140;[I-E]
    return seed; //[I-S]LN=141;[I-E]
  } //[I-S]LN=142;[I-E]
} //[I-S]LN=143;[I-E]