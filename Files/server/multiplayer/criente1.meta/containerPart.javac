package JAVARuntime;

import java.net.Socket; //[I-S]LN=0;[I-E]
import java.io.InputStream; //[I-S]LN=1;[I-E]
import java.io.OutputStream; //[I-S]LN=2;[I-E]
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.text.*;
import java.net.*;
import java.math.*;
import java.io.*;
import java.nio.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:criente1
 //[I-S]LN=3;[I-E]
class criente1 extends Component { //[I-S]LN=4;[I-E]
  private String host = "", msg = "", nome; //[I-S]LN=5;[I-E]
  private int port = 5000, maxPlayer = 10, myId = 0; //[I-S]LN=6;[I-E]
  private Socket socket; //[I-S]LN=7;[I-E]
  private volatile boolean connected = false; //[I-S]LN=8;[I-E]
  private SpatialObject localPlayer; //[I-S]LN=9;[I-E]
  public ObjectFile localplay, amigo; //[I-S]LN=10;[I-E]
 //[I-S]LN=11;[I-E]
  private int[] remoteId; //[I-S]LN=12;[I-E]
  private String[] remoteName; //[I-S]LN=13;[I-E]
  private SpatialObject[] remotePlay; //[I-S]LN=14;[I-E]
  private Vector3Buffer posCache, rotCache, posBufferCache, rotBufferCache; //[I-S]LN=15;[I-E]
  private Queue<Runnable> queue = new ConcurrentLinkedQueue<Runnable>(); //[I-S]LN=16;[I-E]
 //[I-S]LN=17;[I-E]
  private SUIText txt; //[I-S]LN=18;[I-E]
  private server1 checkServe; //[I-S]LN=19;[I-E]
  private handleProtocolo protocolo = new handleProtocolo(); //[I-S]LN=20;[I-E]
  private dangeonGeration seedgera; //[I-S]LN=21;[I-E]
 //[I-S]LN=22;[I-E]
public   void start() { //[I-S]LN=23;[I-E]
    if (maxPlayer <= 0) maxPlayer = 10; //[I-S]LN=24;[I-E]
    remoteId = new int[maxPlayer]; //[I-S]LN=25;[I-E]
    remoteName = new String[maxPlayer]; //[I-S]LN=26;[I-E]
    remotePlay = new SpatialObject[maxPlayer]; //[I-S]LN=27;[I-E]
    posCache = BufferUtils.createVector3Buffer(maxPlayer); //[I-S]LN=28;[I-E]
    rotCache = BufferUtils.createVector3Buffer(maxPlayer); //[I-S]LN=29;[I-E]
    posBufferCache = BufferUtils.createVector3Buffer(maxPlayer); //[I-S]LN=30;[I-E]
    rotBufferCache = BufferUtils.createVector3Buffer(maxPlayer); //[I-S]LN=31;[I-E]
    txt = WorldController.findObject("Ip").findComponent("suitext"); //[I-S]LN=32;[I-E]
    checkServe = myObject.findComponent("server1"); //[I-S]LN=33;[I-E]
    seedgera= WorldController.findObject("dangeon").findComponent("dangeonGeration"); //[I-S]LN=34;[I-E]
  } //[I-S]LN=35;[I-E]
 //[I-S]LN=36;[I-E]
public   void repeat() { //[I-S]LN=37;[I-E]
    Runnable r; //[I-S]LN=38;[I-E]
    while ((r = queue.poll()) != null) r.run(); //[I-S]LN=39;[I-E]
    for (int i = 0; i < maxPlayer; i++) { //[I-S]LN=40;[I-E]
      if (remotePlay[i] != null && remoteId[i] != 0) { //[I-S]LN=41;[I-E]
        float px = posCache.getX(i), py = posCache.getY(i), pz = posCache.getZ(i); //[I-S]LN=42;[I-E]
        float rx = rotCache.getX(i), ry = rotCache.getY(i), rz = rotCache.getZ(i); //[I-S]LN=43;[I-E]
        remotePlay[i].setPosition(px, py, pz); //[I-S]LN=44;[I-E]
        remotePlay[i].setRotation(rx, ry, rz); //[I-S]LN=45;[I-E]
      } //[I-S]LN=46;[I-E]
    } //[I-S]LN=47;[I-E]
    swap(); //[I-S]LN=48;[I-E]
    if (Input.isKeyDown("serv") && !checkServe.running) { //[I-S]LN=49;[I-E]
      InputDialog inputN = //[I-S]LN=50;[I-E]
          new InputDialog( //[I-S]LN=51;[I-E]
              "nome usuario", //[I-S]LN=52;[I-E]
              "", //[I-S]LN=53;[I-E]
              "exit", //[I-S]LN=54;[I-E]
              "ok", //[I-S]LN=55;[I-E]
              new InputDialogListener() { //[I-S]LN=56;[I-E]
                public void onFinish(String t) { //[I-S]LN=57;[I-E]
                  nome = t; //[I-S]LN=58;[I-E]
                  host = "localhost"; //[I-S]LN=59;[I-E]
                  seedgera.setSeed(Random.range(100, 999)); //[I-S]LN=60;[I-E]
                  connect(); //[I-S]LN=61;[I-E]
                } //[I-S]LN=62;[I-E]
 //[I-S]LN=63;[I-E]
                public void onCancel() {} //[I-S]LN=64;[I-E]
              }); //[I-S]LN=65;[I-E]
    } //[I-S]LN=66;[I-E]
    if (Input.isKeyDown("IP")) { //[I-S]LN=67;[I-E]
      InputDialog inputV = //[I-S]LN=68;[I-E]
          new InputDialog( //[I-S]LN=69;[I-E]
              "connect ao servidor", //[I-S]LN=70;[I-E]
              "", //[I-S]LN=71;[I-E]
              "sair", //[I-S]LN=72;[I-E]
              "connect", //[I-S]LN=73;[I-E]
              new InputDialogListener() { //[I-S]LN=74;[I-E]
                public void onFinish(String t) { //[I-S]LN=75;[I-E]
                  host = t; //[I-S]LN=76;[I-E]
                  txt.setText("IP: " + t); //[I-S]LN=77;[I-E]
                  connect(); //[I-S]LN=78;[I-E]
                } //[I-S]LN=79;[I-E]
 //[I-S]LN=80;[I-E]
                public void onCancel() {} //[I-S]LN=81;[I-E]
              }); //[I-S]LN=82;[I-E]
      if (nome == null || nome.isEmpty()) { //[I-S]LN=83;[I-E]
        InputDialog inputN = //[I-S]LN=84;[I-E]
            new InputDialog( //[I-S]LN=85;[I-E]
                "nome usuario", //[I-S]LN=86;[I-E]
                "", //[I-S]LN=87;[I-E]
                "exit", //[I-S]LN=88;[I-E]
                "ok", //[I-S]LN=89;[I-E]
                new InputDialogListener() { //[I-S]LN=90;[I-E]
                  public void onFinish(String t) { //[I-S]LN=91;[I-E]
                    nome = t; //[I-S]LN=92;[I-E]
                    txt.setText("nome: " + t); //[I-S]LN=93;[I-E]
                  } //[I-S]LN=94;[I-E]
 //[I-S]LN=95;[I-E]
                  public void onCancel() {} //[I-S]LN=96;[I-E]
                }); //[I-S]LN=97;[I-E]
      } //[I-S]LN=98;[I-E]
    } //[I-S]LN=99;[I-E]
  } //[I-S]LN=100;[I-E]
 //[I-S]LN=101;[I-E]
  void connect() { //[I-S]LN=102;[I-E]
    if (connected) { //[I-S]LN=103;[I-E]
      Toast.showText("JÃ¡ conectado", 1); //[I-S]LN=104;[I-E]
      return; //[I-S]LN=105;[I-E]
    } //[I-S]LN=106;[I-E]
 //[I-S]LN=107;[I-E]
    new AsyncTask( //[I-S]LN=108;[I-E]
        new AsyncRunnable() { //[I-S]LN=109;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=110;[I-E]
            try { //[I-S]LN=111;[I-E]
              socket = new Socket(host, port); //[I-S]LN=112;[I-E]
              connected = true; //[I-S]LN=113;[I-E]
              OutputStream out = socket.getOutputStream(); //[I-S]LN=114;[I-E]
              out.write(("join:" + nome + "\n").getBytes("UTF-8")); //[I-S]LN=115;[I-E]
              out.flush(); //[I-S]LN=116;[I-E]
 //[I-S]LN=117;[I-E]
              return "Conectado ao servidor"; //[I-S]LN=118;[I-E]
            } catch (Exception e) { //[I-S]LN=119;[I-E]
              return "Erro conectar: " + e.getMessage(); //[I-S]LN=120;[I-E]
            } //[I-S]LN=121;[I-E]
          } //[I-S]LN=122;[I-E]
 //[I-S]LN=123;[I-E]
          public void onEngine(Object result) { //[I-S]LN=124;[I-E]
            String msgResult = (String) result; //[I-S]LN=125;[I-E]
            Toast.showText(msgResult, 1); //[I-S]LN=126;[I-E]
            Console.log(msgResult); //[I-S]LN=127;[I-E]
            if (connected) { //[I-S]LN=128;[I-E]
              txt.setText("IP: " + socket.getInetAddress().getHostAddress()); //[I-S]LN=129;[I-E]
              startListening(); //[I-S]LN=130;[I-E]
            } //[I-S]LN=131;[I-E]
          } //[I-S]LN=132;[I-E]
        }); //[I-S]LN=133;[I-E]
  } //[I-S]LN=134;[I-E]
 //[I-S]LN=135;[I-E]
  private void runOnMain(Runnable r) { //[I-S]LN=136;[I-E]
    queue.add(r); //[I-S]LN=137;[I-E]
  } //[I-S]LN=138;[I-E]
 //[I-S]LN=139;[I-E]
  private void startListening() { //[I-S]LN=140;[I-E]
    new AsyncTask( //[I-S]LN=141;[I-E]
        new AsyncRunnable() { //[I-S]LN=142;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=143;[I-E]
            try { //[I-S]LN=144;[I-E]
              BufferedReader rend = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8")); //[I-S]LN=145;[I-E]
              String line; //[I-S]LN=146;[I-E]
 //[I-S]LN=147;[I-E]
              while (connected && (line = rend.readLine()) != null) { //[I-S]LN=148;[I-E]
                processServ(line); //[I-S]LN=149;[I-E]
              } //[I-S]LN=150;[I-E]
            } catch (Exception e) { //[I-S]LN=151;[I-E]
              return "Erro cliente: " + e.getMessage(); //[I-S]LN=152;[I-E]
            } //[I-S]LN=153;[I-E]
            return null; //[I-S]LN=154;[I-E]
          } //[I-S]LN=155;[I-E]
 //[I-S]LN=156;[I-E]
          public void onEngine(Object result) { //[I-S]LN=157;[I-E]
            if (result != null && connected) Console.log(result.toString()); //[I-S]LN=158;[I-E]
          } //[I-S]LN=159;[I-E]
        }); //[I-S]LN=160;[I-E]
  } //[I-S]LN=161;[I-E]
 //[I-S]LN=162;[I-E]
  private void processServ(String txt) { //[I-S]LN=163;[I-E]
    if (txt.startsWith("id:")) { //[I-S]LN=164;[I-E]
      myId = Integer.parseInt(txt.substring(3)); //[I-S]LN=165;[I-E]
      runOnMain( //[I-S]LN=166;[I-E]
          new Runnable() { public void run() { //[I-S]LN=167;[I-E]
                    if (localPlayer == null) { //[I-S]LN=168;[I-E]
                      localPlayer = myObject.instantiate(localplay); //[I-S]LN=169;[I-E]
                      localPlayer.setPosition(0, 1, 0); //[I-S]LN=170;[I-E]
                      localPlayer.setName(nome); //[I-S]LN=171;[I-E]
                    } //[I-S]LN=172;[I-E]
                    new AsyncTask( //[I-S]LN=173;[I-E]
                        new AsyncRunnable() { //[I-S]LN=174;[I-E]
                          public Object onBackground(Object input) { //[I-S]LN=175;[I-E]
                            try { //[I-S]LN=176;[I-E]
                              StringBuilder sb = new StringBuilder(); //[I-S]LN=177;[I-E]
                              OutputStream out = socket.getOutputStream(); //[I-S]LN=178;[I-E]
                              while (connected && socket != null && !socket.isClosed()) { //[I-S]LN=179;[I-E]
                                sb.setLength(0); //[I-S]LN=180;[I-E]
                                Vector3 pos = localPlayer.getPosition(); //[I-S]LN=181;[I-E]
                                Quaternion rot = localPlayer.getRotation(); //[I-S]LN=182;[I-E]
sb.append("pos:").append(myId).append(":").append(pos.getX()).append(":").append(pos.getY()).append(":").append(pos.getZ()).append("\n"); //[I-S]LN=183;[I-E]
sb.append("rot:").append(myId).append(":").append(rot.getX()).append(":").append(rot.getY()).append(":").append(rot.getZ()).append("\n"); //[I-S]LN=184;[I-E]
                                sb.append("seed:").append(seedgera.getSeed()).append("\n"); //[I-S]LN=185;[I-E]
                                out.write(sb.toString().getBytes("UTF-8")); //[I-S]LN=186;[I-E]
                                out.flush(); //[I-S]LN=187;[I-E]
                                Thread.sleep(10); //[I-S]LN=188;[I-E]
                              } //[I-S]LN=189;[I-E]
                            } catch (Exception e) { //[I-S]LN=190;[I-E]
                              desconnect(); //[I-S]LN=191;[I-E]
                            } //[I-S]LN=192;[I-E]
                            return null; //[I-S]LN=193;[I-E]
                          } //[I-S]LN=194;[I-E]
         //[I-S]LN=195;[I-E]
                          public void onEngine(Object result) {} //[I-S]LN=196;[I-E]
                        }); //[I-S]LN=197;[I-E]
         }}); //[I-S]LN=198;[I-E]
 //[I-S]LN=199;[I-E]
    } else if (txt.startsWith("spaw:")) { //[I-S]LN=200;[I-E]
      handleSpawn(txt); //[I-S]LN=201;[I-E]
    } else if (txt.startsWith("pos:")) { //[I-S]LN=202;[I-E]
      protocolo.handlePos(txt, myId, posCache, remoteId, maxPlayer); //[I-S]LN=203;[I-E]
    } else if (txt.startsWith("rot:")) { //[I-S]LN=204;[I-E]
      protocolo.handleRot(txt, myId, rotCache, remoteId, maxPlayer); //[I-S]LN=205;[I-E]
    } else if (txt.startsWith("seed:")) { //[I-S]LN=206;[I-E]
      protocolo.handleSeed(txt, myId, seedgera); //[I-S]LN=207;[I-E]
    } else if (txt.startsWith("left:")) { //[I-S]LN=208;[I-E]
      handleLeft(txt); //[I-S]LN=209;[I-E]
    } else { //[I-S]LN=210;[I-E]
      Toast.showText(txt, 1); //[I-S]LN=211;[I-E]
      Console.log(txt); //[I-S]LN=212;[I-E]
    }  //[I-S]LN=213;[I-E]
  } //[I-S]LN=214;[I-E]
 //[I-S]LN=215;[I-E]
  private void handleSpawn(String txt) { //[I-S]LN=216;[I-E]
    String[] p = txt.split(":"); //[I-S]LN=217;[I-E]
    final int id = Integer.parseInt(p[1]); //[I-S]LN=218;[I-E]
    if (id == myId) return; //[I-S]LN=219;[I-E]
 //[I-S]LN=220;[I-E]
    int slot = -1; //[I-S]LN=221;[I-E]
    for (int i = 0; i < maxPlayer; i++) { //[I-S]LN=222;[I-E]
      if (remoteId[i] == 0) { //[I-S]LN=223;[I-E]
        slot = i; //[I-S]LN=224;[I-E]
        break; //[I-S]LN=225;[I-E]
      } //[I-S]LN=226;[I-E]
    } //[I-S]LN=227;[I-E]
    if (slot == -1) return; //[I-S]LN=228;[I-E]
    final int tmpslot = slot; //[I-S]LN=229;[I-E]
    final String nomplayer = p[2]; //[I-S]LN=230;[I-E]
    final float x = Float.parseFloat(p[3]); //[I-S]LN=231;[I-E]
    final float y = Float.parseFloat(p[4]); //[I-S]LN=232;[I-E]
    final float z = Float.parseFloat(p[5]); //[I-S]LN=233;[I-E]
    runOnMain( //[I-S]LN=234;[I-E]
        new Runnable() { public void run() { //[I-S]LN=235;[I-E]
                  if (remotePlay[tmpslot] == null) { //[I-S]LN=236;[I-E]
                    remotePlay[tmpslot] = myObject.instantiate(amigo); //[I-S]LN=237;[I-E]
                    remotePlay[tmpslot].setName(nomplayer); //[I-S]LN=238;[I-E]
                  } //[I-S]LN=239;[I-E]
                  remotePlay[tmpslot].setPosition(x, y, z); //[I-S]LN=240;[I-E]
                  remoteId[tmpslot] = id; //[I-S]LN=241;[I-E]
                  remoteName[tmpslot] = nomplayer; //[I-S]LN=242;[I-E]
                  Toast.showText(nomplayer + " entrou", 1); //[I-S]LN=243;[I-E]
         }}); //[I-S]LN=244;[I-E]
  } //[I-S]LN=245;[I-E]
 //[I-S]LN=246;[I-E]
  private void handleLeft(String txt) { //[I-S]LN=247;[I-E]
    String[] p = txt.split(":"); //[I-S]LN=248;[I-E]
    final int id = Integer.parseInt(p[1]); //[I-S]LN=249;[I-E]
    runOnMain( //[I-S]LN=250;[I-E]
        new Runnable() { public void run() { //[I-S]LN=251;[I-E]
                  for (int is = 0; is < maxPlayer; is++) { //[I-S]LN=252;[I-E]
                    if (remoteId[is] == id) { //[I-S]LN=253;[I-E]
                      if (remotePlay[is] != null) { //[I-S]LN=254;[I-E]
                        remotePlay[is].destroy(); //[I-S]LN=255;[I-E]
                      } //[I-S]LN=256;[I-E]
                      Toast.showText(remoteName[is] + " saiu!", 1); //[I-S]LN=257;[I-E]
                      remotePlay[is] = null; //[I-S]LN=258;[I-E]
                      remoteId[is] = 0; //[I-S]LN=259;[I-E]
                      remoteName[is] = null; //[I-S]LN=260;[I-E]
                      break; //[I-S]LN=261;[I-E]
                    } //[I-S]LN=262;[I-E]
                  } //[I-S]LN=263;[I-E]
         }}); //[I-S]LN=264;[I-E]
  } //[I-S]LN=265;[I-E]
 //[I-S]LN=266;[I-E]
  void desconnect() { //[I-S]LN=267;[I-E]
    connected = false; //[I-S]LN=268;[I-E]
    try { //[I-S]LN=269;[I-E]
      if (socket != null && !socket.isClosed()) socket.close(); //[I-S]LN=270;[I-E]
      nome = null; //[I-S]LN=271;[I-E]
    } catch (Exception e) { //[I-S]LN=272;[I-E]
      Toast.showText("Desconnect", 1); //[I-S]LN=273;[I-E]
    } //[I-S]LN=274;[I-E]
  } //[I-S]LN=275;[I-E]
 //[I-S]LN=276;[I-E]
  private void swap() { //[I-S]LN=277;[I-E]
    Vector3Buffer tmpPos = posCache, tmpRot = rotCache; //[I-S]LN=278;[I-E]
    posCache = posBufferCache; //[I-S]LN=279;[I-E]
    posBufferCache = tmpPos; //[I-S]LN=280;[I-E]
    rotCache = rotBufferCache; //[I-S]LN=281;[I-E]
    rotBufferCache = tmpRot; //[I-S]LN=282;[I-E]
  } //[I-S]LN=283;[I-E]
} //[I-S]LN=284;[I-E]