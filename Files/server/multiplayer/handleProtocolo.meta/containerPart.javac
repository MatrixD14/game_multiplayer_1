package JAVARuntime;

import java.net.Socket; //[I-S]LN=0;[I-E]
import java.io.InputStream; //[I-S]LN=1;[I-E]
import java.io.OutputStream; //[I-S]LN=2;[I-E]
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.text.*;
import java.net.*;
import java.math.*;
import java.io.*;
import java.nio.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:moveVision
class moveVision extends Component { //[I-S]LN=0;[I-E]
  private Vector2 joy; //[I-S]LN=1;[I-E]
  private float speedJ = 2; //[I-S]LN=2;[I-E]
  private float x, y; //[I-S]LN=3;[I-E]
  public Texture[] spaits = new Texture[10]; //[I-S]LN=4;[I-E]
  private ModelRenderer model; //[I-S]LN=5;[I-E]
  private SpatialObject obj; //[I-S]LN=6;[I-E]
  private int anim = 0, AnimFC = 0; //[I-S]LN=7;[I-E]
  private float FrameTime = 0, delay = .15f; //[I-S]LN=8;[I-E]
  private int mvSkin = 0; //[I-S]LN=9;[I-E]
 //[I-S]LN=10;[I-E]
public   void start() { //[I-S]LN=11;[I-E]
    joy = Input.getAxisValue("joy"); //[I-S]LN=12;[I-E]
    obj = myObject.findChildObject("model"); //[I-S]LN=13;[I-E]
    model = obj.findComponent("ModelRenderer"); //[I-S]LN=14;[I-E]
  } //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
public   void repeat() { //[I-S]LN=17;[I-E]
    if (Input.isKeyDown("mvSkin")) mvSkin++; //[I-S]LN=18;[I-E]
    if (mvSkin >= spaits.length) mvSkin = 0; //[I-S]LN=19;[I-E]
model.getMaterial().setAlbedo(spaits[mvSkin]); //[I-S]LN=20;[I-E]
    if (key("w") || key("s") || key("a") || key("d")) { //[I-S]LN=21;[I-E]
      movekey(); //[I-S]LN=22;[I-E]
    } else { //[I-S]LN=23;[I-E]
move(joy.getX() * speedJ, joy.getY() * speedJ); //[I-S]LN=24;[I-E]
animation(joy.getX() * speedJ, joy.getY() * speedJ); //[I-S]LN=25;[I-E]
    }  //[I-S]LN=26;[I-E]
  } //[I-S]LN=27;[I-E]
 //[I-S]LN=28;[I-E]
  private void movekey() { //[I-S]LN=29;[I-E]
    float x = 0, y = 0; //[I-S]LN=30;[I-E]
    if (key("w")) y = +1; //[I-S]LN=31;[I-E]
    if (key("s")) y = -1; //[I-S]LN=32;[I-E]
    if (key("a")) x = -1; //[I-S]LN=33;[I-E]
    if (key("d")) x = +1; //[I-S]LN=34;[I-E]
    move(x * speedJ, -y * speedJ); //[I-S]LN=35;[I-E]
    animation(x * speedJ, -y * speedJ); //[I-S]LN=36;[I-E]
  } //[I-S]LN=37;[I-E]
 //[I-S]LN=38;[I-E]
  private boolean key(String key) { //[I-S]LN=39;[I-E]
    if (Input.keyboard.isKeyPressed(key)) return true; //[I-S]LN=40;[I-E]
    return false; //[I-S]LN=41;[I-E]
  } //[I-S]LN=42;[I-E]
 //[I-S]LN=43;[I-E]
  private void move(float x, float y) { //[I-S]LN=44;[I-E]
    myObject.moveInSeconds(x, 0, y); //[I-S]LN=45;[I-E]
    // if (x != 0 || y != 0) Console.log("x: " + x + "y: " + y); //[I-S]LN=46;[I-E]
  } //[I-S]LN=47;[I-E]
 //[I-S]LN=48;[I-E]
  private void animation(float x, float y) { //[I-S]LN=49;[I-E]
    if (Math.abs(x) == 0 && Math.abs(y) == 0) { //[I-S]LN=50;[I-E]
      anim = 0; //[I-S]LN=51;[I-E]
      atlas(0, AnimFC); //[I-S]LN=52;[I-E]
      return; //[I-S]LN=53;[I-E]
    } //[I-S]LN=54;[I-E]
    FrameTime += Time.deltaTime(); //[I-S]LN=55;[I-E]
    if (FrameTime >= delay) { //[I-S]LN=56;[I-E]
      FrameTime = 0; //[I-S]LN=57;[I-E]
      if ((anim++) > 1) anim = 0; //[I-S]LN=58;[I-E]
    } //[I-S]LN=59;[I-E]
    if (Math.abs(y) > Math.abs(x)) { //[I-S]LN=60;[I-E]
      AnimFC = (y > 0) ? 0 : 1; //[I-S]LN=61;[I-E]
    } else { //[I-S]LN=62;[I-E]
      AnimFC = 2; //[I-S]LN=63;[I-E]
      if (x < 0) obj.setScale(1, 1, 1); //[I-S]LN=64;[I-E]
      else if (x > 0) obj.setScale(-1f, 1, 1); //[I-S]LN=65;[I-E]
    } //[I-S]LN=66;[I-E]
    atlas(anim, AnimFC); //[I-S]LN=67;[I-E]
  } //[I-S]LN=68;[I-E]
 //[I-S]LN=69;[I-E]
  public void atlas(int x, int y) { //[I-S]LN=70;[I-E]
model.getMaterial().setVector2("AlbedoOffset", new Vector2(x * .329f, y * .3348f)); //[I-S]LN=71;[I-E]
model.getMaterial().setVector2("AlbedoTilling", new Vector2(0.333333f, .333333f)); //[I-S]LN=72;[I-E]
  } //[I-S]LN=73;[I-E]
 //[I-S]LN=74;[I-E]
  public int getAnimFC() { //[I-S]LN=75;[I-E]
    return AnimFC; //[I-S]LN=76;[I-E]
  } //[I-S]LN=77;[I-E]
 //[I-S]LN=78;[I-E]
  public int getAnim() { //[I-S]LN=79;[I-E]
    return anim; //[I-S]LN=80;[I-E]
  } //[I-S]LN=81;[I-E]
  /* //[I-S]LN=82;[I-E]
  float shakeAmount = .15f, times = 0; //[I-S]LN=83;[I-E]
  public boolean onoff = true; //[I-S]LN=84;[I-E]
 //[I-S]LN=85;[I-E]
  private void shake(float value) { //[I-S]LN=86;[I-E]
    if (!onoff) return; //[I-S]LN=87;[I-E]
    Vector3 mypos = obj.position.copy(); //[I-S]LN=88;[I-E]
    if (onoff) { //[I-S]LN=89;[I-E]
      times += 0.01f; //[I-S]LN=90;[I-E]
      float offsetX = (float) Random.range(-shakeAmount, shakeAmount); //[I-S]LN=91;[I-E]
      float offsetZ = (float) Random.range(-shakeAmount, shakeAmount); //[I-S]LN=92;[I-E]
      obj.setPosition(mypos.x + offsetX, mypos.y, mypos.z + offsetZ); //[I-S]LN=93;[I-E]
      if (times > value) { //[I-S]LN=94;[I-E]
        obj.setPosition(mypos); //[I-S]LN=95;[I-E]
        onoff = false; //[I-S]LN=96;[I-E]
        times = 0; //[I-S]LN=97;[I-E]
      } //[I-S]LN=98;[I-E]
    } //[I-S]LN=99;[I-E]
  }*/ //[I-S]LN=100;[I-E]
} // 0.329f //[I-S]LN=101;[I-E]
//C-R:git
class git extends Component { //[I-S]LN=0;[I-E]
  @Order(idx = -2) //[I-S]LN=1;[I-E]
  public String NameGitIsRepository; // "name do usuario do github/ nome do repositorio que sera alocado os arquivo-->  usuario/repositorio" //[I-S]LN=2;[I-E]
 //[I-S]LN=3;[I-E]
  @Order(idx = -1) //[I-S]LN=4;[I-E]
  public String path; // "caminho da pasta a pasta /Files/ e a pasta raiz que poderar ser enviado para o github " //[I-S]LN=5;[I-E]
 //[I-S]LN=6;[I-E]
  @Order(idx = 1) //[I-S]LN=7;[I-E]
  public String BranchOrCommitRecovery = "main"; // / branch e uma linha paralela do projeto que muda com o tempo //[I-S]LN=8;[I-E]
  /// CommitRecovery usa o codigo sha para voltar no tempo //[I-S]LN=9;[I-E]
 //[I-S]LN=10;[I-E]
  @Order(idx = 2) //[I-S]LN=11;[I-E]
  public String Commit = "comito"; // "etiqueta que marca o tempo de modificação do arquivo que quanda o sha" //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
  @Order(idx = 3) //[I-S]LN=14;[I-E]
  public String token; // "codigo toke do github" //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
  private String Dir; //[I-S]LN=17;[I-E]
 //[I-S]LN=18;[I-E]
  PopupDialog mssg; //[I-S]LN=19;[I-E]
  private int onoff = 0; //[I-S]LN=20;[I-E]
 //[I-S]LN=21;[I-E]
  private gitClone gitclone = new gitClone(); //[I-S]LN=22;[I-E]
  private gitPush gitpush = new gitPush(); //[I-S]LN=23;[I-E]
  private gitPushMult gitpushmult = new gitPushMult(); //[I-S]LN=24;[I-E]
  private gitCloneMult gitclonemult = new gitCloneMult(); //[I-S]LN=25;[I-E]
 //[I-S]LN=26;[I-E]
  @Order(idx = 0) //[I-S]LN=27;[I-E]
  public PropertiesButton DownLoad = //[I-S]LN=28;[I-E]
      new PropertiesButton( //[I-S]LN=29;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=30;[I-E]
public             void onClicked() { //[I-S]LN=31;[I-E]
              onoff = 2; //[I-S]LN=32;[I-E]
              Alert(); //[I-S]LN=33;[I-E]
            } //[I-S]LN=34;[I-E]
          }); //[I-S]LN=35;[I-E]
 //[I-S]LN=36;[I-E]
  @Order(idx = 4) //[I-S]LN=37;[I-E]
  public PropertiesButton UpLoad = //[I-S]LN=38;[I-E]
      new PropertiesButton( //[I-S]LN=39;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=40;[I-E]
public             void onClicked() { //[I-S]LN=41;[I-E]
              onoff = 1; //[I-S]LN=42;[I-E]
              Alert(); //[I-S]LN=43;[I-E]
            } //[I-S]LN=44;[I-E]
          }); //[I-S]LN=45;[I-E]
 //[I-S]LN=46;[I-E]
  private void Alert() { //[I-S]LN=47;[I-E]
    mssg = new PopupDialog(PopupDialog.ALERT, "voce tem certesa quer envia/baixa " + path, ""); //[I-S]LN=48;[I-E]
    mssg.setConfirmButton( //[I-S]LN=49;[I-E]
        "confirm", //[I-S]LN=50;[I-E]
        new PopupDialogListener() { //[I-S]LN=51;[I-E]
          public void onClicked() { //[I-S]LN=52;[I-E]
            if (onoff == 1) UpLoad(); //[I-S]LN=53;[I-E]
            if (onoff == 2) DownLoad(); //[I-S]LN=54;[I-E]
            onoff = 0; //[I-S]LN=55;[I-E]
 //[I-S]LN=56;[I-E]
            mssg.dismiss(); //[I-S]LN=57;[I-E]
          }  //[I-S]LN=58;[I-E]
        }); //[I-S]LN=59;[I-E]
    mssg.setCancelButton( //[I-S]LN=60;[I-E]
        "cancel", //[I-S]LN=61;[I-E]
        new PopupDialogListener() { //[I-S]LN=62;[I-E]
          public void onClicked() { //[I-S]LN=63;[I-E]
 //[I-S]LN=64;[I-E]
            mssg.dismiss(); //[I-S]LN=65;[I-E]
          } //[I-S]LN=66;[I-E]
        }); //[I-S]LN=67;[I-E]
    mssg.show(); //[I-S]LN=68;[I-E]
    // return false; //[I-S]LN=69;[I-E]
  } //[I-S]LN=70;[I-E]
 //[I-S]LN=71;[I-E]
  public void DownLoad() { //[I-S]LN=72;[I-E]
    String DownloadUrl = null; //[I-S]LN=73;[I-E]
    boolean onoffFile = false; //[I-S]LN=74;[I-E]
    if (path.contains(".")) onoffFile = true; //[I-S]LN=75;[I-E]
    if (onoffFile && verifica(false, false)) { //[I-S]LN=76;[I-E]
      if ((BranchOrCommitRecovery == null || BranchOrCommitRecovery.length() < 40) && verifica(false, true)) BranchOrCommitRecovery = "main"; //[I-S]LN=77;[I-E]
      else Console.log("recuperando file no tempo"); //[I-S]LN=78;[I-E]
 //[I-S]LN=79;[I-E]
      DownloadUrl = "https://raw.githubusercontent.com/" + NameGitIsRepository + "/" + BranchOrCommitRecovery + "/Files/" + path; //[I-S]LN=80;[I-E]
      gitclone.GitClone(DownloadUrl, Dir); //[I-S]LN=81;[I-E]
 //[I-S]LN=82;[I-E]
      StringBuilder InforDate = new StringBuilder(); //[I-S]LN=83;[I-E]
      InforDate.append("{\n \"pasth\": \"").append(Dir).append("\",\n \"NameFile\": \"").append(path).append("\",\n \"Link\": \"").append(DownloadUrl).append("\"\n}"); //[I-S]LN=84;[I-E]
      Console.log(InforDate.toString()); //[I-S]LN=85;[I-E]
 //[I-S]LN=86;[I-E]
    } else if (verifica(true, false)) { //[I-S]LN=87;[I-E]
      DownloadUrl = "https://api.github.com/repos/" + NameGitIsRepository + "/contents/Files/" + path + "?ref=main"; //[I-S]LN=88;[I-E]
      File dir = new File(Dir); //[I-S]LN=89;[I-E]
      gitclonemult.gitPasthAll(gitclone, dir, DownloadUrl, token); //[I-S]LN=90;[I-E]
    } //[I-S]LN=91;[I-E]
  } //[I-S]LN=92;[I-E]
 //[I-S]LN=93;[I-E]
  public void UpLoad() { //[I-S]LN=94;[I-E]
    boolean onoffFile = false; //[I-S]LN=95;[I-E]
    if (path.contains(".")) onoffFile = true; //[I-S]LN=96;[I-E]
    if (!verifica(true, true)) return; //[I-S]LN=97;[I-E]
    if (onoffFile) { //[I-S]LN=98;[I-E]
      String API_Url = "https://api.github.com/repos/" + NameGitIsRepository + "/contents/Files/" + path + "?ref=main"; //[I-S]LN=99;[I-E]
      // busca o sha do file //[I-S]LN=100;[I-E]
 //[I-S]LN=101;[I-E]
      String shas = gitpush.getSha(API_Url, token); //[I-S]LN=102;[I-E]
      gitpush.GitPush(API_Url, Commit, Dir, token, shas); //[I-S]LN=103;[I-E]
 //[I-S]LN=104;[I-E]
      Console.log(!shas.isEmpty() ? "update" : "create"); //[I-S]LN=105;[I-E]
      Console.log("Link: " + API_Url); //[I-S]LN=106;[I-E]
    } else { //[I-S]LN=107;[I-E]
      File dir = new File(Dir); //[I-S]LN=108;[I-E]
      if (dir == null || !dir.exists()) return; //[I-S]LN=109;[I-E]
 //[I-S]LN=110;[I-E]
      // "lista todos oa file que existe" //[I-S]LN=111;[I-E]
      gitpushmult.UpVariaPasth(gitpush, dir, dir.getAbsolutePath() + "", NameGitIsRepository, Commit, path, token); //[I-S]LN=112;[I-E]
    } //[I-S]LN=113;[I-E]
  } //[I-S]LN=114;[I-E]
 //[I-S]LN=115;[I-E]
  public boolean verifica(boolean Token, boolean pont) { //[I-S]LN=116;[I-E]
    if (!NameGitIsRepository.contains("/") || NameGitIsRepository.isEmpty()) { //[I-S]LN=117;[I-E]
      Toast.showText("esta errado o link do \"nome do usuario do git\" / nome do repositorio", 1); //[I-S]LN=118;[I-E]
      return false; //[I-S]LN=119;[I-E]
    } //[I-S]LN=120;[I-E]
    if (path == null || path.isEmpty() || (pont && !new File(Directories.getProjectFolder() + "/Files/" + path).exists())) { //[I-S]LN=121;[I-E]
      Toast.showText("caminho para o arquivo esta faltando ou errado", 1); //[I-S]LN=122;[I-E]
      return false; //[I-S]LN=123;[I-E]
    } //[I-S]LN=124;[I-E]
    if (Token && (token == null || token.length() < 20)) { //[I-S]LN=125;[I-E]
      Toast.showText("o toke esta vazio ou faltando", 1); //[I-S]LN=126;[I-E]
      return false; //[I-S]LN=127;[I-E]
    } //[I-S]LN=128;[I-E]
 //[I-S]LN=129;[I-E]
    Dir = Directories.getProjectFolder() + "Files/" + path; //[I-S]LN=130;[I-E]
    return true; //[I-S]LN=131;[I-E]
  } //[I-S]LN=132;[I-E]
} //[I-S]LN=133;[I-E]
//C-R:gitClone
class gitClone { //[I-S]LN=0;[I-E]
 //[I-S]LN=1;[I-E]
  public void GitClone(String link, String path) { //[I-S]LN=2;[I-E]
    InputStream in = null; //[I-S]LN=3;[I-E]
    BufferedInputStream bs = null; //[I-S]LN=4;[I-E]
    FileOutputStream fs = null; //[I-S]LN=5;[I-E]
    File addPasth = new File(path); //[I-S]LN=6;[I-E]
    File paretDir = addPasth.getParentFile(); //[I-S]LN=7;[I-E]
    if (paretDir != null && !paretDir.exists()) paretDir.mkdirs(); //[I-S]LN=8;[I-E]
 //[I-S]LN=9;[I-E]
    try { //[I-S]LN=10;[I-E]
      HttpURLConnection com = (HttpURLConnection) new URL(link).openConnection(); //[I-S]LN=11;[I-E]
      if (com.getResponseCode() != 200) { //[I-S]LN=12;[I-E]
          Console.log("erro no Http: "+ com.getResponseCode()); //[I-S]LN=13;[I-E]
        return; //[I-S]LN=14;[I-E]
      }  //[I-S]LN=15;[I-E]
      in = com.getInputStream(); //[I-S]LN=16;[I-E]
      bs = new BufferedInputStream(in); //[I-S]LN=17;[I-E]
      fs = new FileOutputStream(addPasth); //[I-S]LN=18;[I-E]
      byte[] date = new byte[1024]; //[I-S]LN=19;[I-E]
      int count; //[I-S]LN=20;[I-E]
      while ((count = bs.read(date, 0, 1024)) != -1) { //[I-S]LN=21;[I-E]
        fs.write(date, 0, count); //[I-S]LN=22;[I-E]
      } //[I-S]LN=23;[I-E]
      if (addPasth.length() == 0) Console.log("falho file void or no exists"); //[I-S]LN=24;[I-E]
    } catch (IOException e) { //[I-S]LN=25;[I-E]
      Console.log("erro no Download file: " + e.getMessage()); //[I-S]LN=26;[I-E]
    } finally { //[I-S]LN=27;[I-E]
      try { //[I-S]LN=28;[I-E]
        if (fs != null) fs.close(); //[I-S]LN=29;[I-E]
      } catch (IOException e) { //[I-S]LN=30;[I-E]
        Console.log("erro no FileOutputStream: " + e.getMessage()); //[I-S]LN=31;[I-E]
      } //[I-S]LN=32;[I-E]
      try { //[I-S]LN=33;[I-E]
        if (bs != null) bs.close(); //[I-S]LN=34;[I-E]
      } catch (IOException e) { //[I-S]LN=35;[I-E]
        Console.log("erro no BufferedInputStream: " + e.getMessage()); //[I-S]LN=36;[I-E]
      } //[I-S]LN=37;[I-E]
      try { //[I-S]LN=38;[I-E]
        if (in != null) in.close(); //[I-S]LN=39;[I-E]
      } catch (IOException e) { //[I-S]LN=40;[I-E]
        Console.log("erro no InputStream: " + e.getMessage()); //[I-S]LN=41;[I-E]
      } //[I-S]LN=42;[I-E]
    } //[I-S]LN=43;[I-E]
  } //[I-S]LN=44;[I-E]
} //[I-S]LN=45;[I-E]
//C-R:gitPush
class gitPush { //[I-S]LN=0;[I-E]
  public void GitPush(String link, String menssage, String pasth, String token, String sha) { //[I-S]LN=1;[I-E]
    try { //[I-S]LN=2;[I-E]
      byte[] date = readFile(pasth); //[I-S]LN=3;[I-E]
      String encode = Base64.getEncoder().encodeToString(date); //[I-S]LN=4;[I-E]
 //[I-S]LN=5;[I-E]
      // json que sera enviado para api.github //[I-S]LN=6;[I-E]
 //[I-S]LN=7;[I-E]
      StringBuilder json = new StringBuilder(); //[I-S]LN=8;[I-E]
      json.append("{\n  \"message\": \"").append(menssage).append("\",\n  \"content\": \"").append(encode).append("\",\n  \"branch\": \"main\""); //[I-S]LN=9;[I-E]
      if (sha != null && !sha.isEmpty()) json.append(",\n  \"sha\": \"").append(sha).append("\""); //[I-S]LN=10;[I-E]
      json.append("\n}"); //[I-S]LN=11;[I-E]
      Console.log("{\n  \"message\": \""+menssage+"\",\n  \"branch\": \"main\",\n  "+((sha != null && !sha.isEmpty())?"\"sha\": \""+sha:"")+"\"\n}"); //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
      // connect com o github //[I-S]LN=14;[I-E]
 //[I-S]LN=15;[I-E]
      HttpURLConnection com = (HttpURLConnection) new URL(link).openConnection(); //[I-S]LN=16;[I-E]
      com.setRequestMethod("PUT"); //[I-S]LN=17;[I-E]
      com.setDoOutput(true); //[I-S]LN=18;[I-E]
      com.setRequestProperty("Authorization", "token " + token); //[I-S]LN=19;[I-E]
      com.setRequestProperty("Content-Type", "application/json"); //[I-S]LN=20;[I-E]
 //[I-S]LN=21;[I-E]
      OutputStream output = com.getOutputStream(); //[I-S]LN=22;[I-E]
      output.write(json.toString().getBytes("UTF-8")); //[I-S]LN=23;[I-E]
      output.flush(); //[I-S]LN=24;[I-E]
      output.close(); //[I-S]LN=25;[I-E]
 //[I-S]LN=26;[I-E]
      /// vierifica se teve algum erro ao conectar como github //[I-S]LN=27;[I-E]
 //[I-S]LN=28;[I-E]
      int menss = com.getResponseCode(); //[I-S]LN=29;[I-E]
      Console.log(menss == 201 || menss == 200 ? "file enviado sucess" : "erro em algum folder"); //[I-S]LN=30;[I-E]
 //[I-S]LN=31;[I-E]
      InputStream input = (menss >= 400) ? com.getErrorStream() : com.getInputStream(); //[I-S]LN=32;[I-E]
      BufferedReader reader = new BufferedReader(new InputStreamReader(input)); //[I-S]LN=33;[I-E]
      StringBuilder result = new StringBuilder(); //[I-S]LN=34;[I-E]
      String line; //[I-S]LN=35;[I-E]
      while ((line = reader.readLine()) != null) result.append(line); //[I-S]LN=36;[I-E]
      Console.log("\nreposta: " + result.toString()); //[I-S]LN=37;[I-E]
      input.close(); //[I-S]LN=38;[I-E]
    } catch (Exception e) { //[I-S]LN=39;[I-E]
      Console.log(e); //[I-S]LN=40;[I-E]
    } //[I-S]LN=41;[I-E]
  } //[I-S]LN=42;[I-E]
 //[I-S]LN=43;[I-E]
  /// função que ve o tamanho do file que sera enviado para git para não manda faltando em byte //[I-S]LN=44;[I-E]
 //[I-S]LN=45;[I-E]
  public byte[] readFile(String pasth) { //[I-S]LN=46;[I-E]
    try { //[I-S]LN=47;[I-E]
      FileInputStream fs = new FileInputStream(pasth); //[I-S]LN=48;[I-E]
      ByteArrayOutputStream buffer = new ByteArrayOutputStream(); //[I-S]LN=49;[I-E]
      byte[] date = new byte[1024]; //[I-S]LN=50;[I-E]
      int read; //[I-S]LN=51;[I-E]
      while ((read = fs.read(date)) != -1) buffer.write(date, 0, read); //[I-S]LN=52;[I-E]
      fs.close(); //[I-S]LN=53;[I-E]
      return buffer.toByteArray(); //[I-S]LN=54;[I-E]
    } catch (Exception e) { //[I-S]LN=55;[I-E]
      Console.log(e); //[I-S]LN=56;[I-E]
    } //[I-S]LN=57;[I-E]
    return null; //[I-S]LN=58;[I-E]
  } //[I-S]LN=59;[I-E]
 //[I-S]LN=60;[I-E]
  /// funcão vai busca no json da api.github onde esta o "sha" do file existe no github //[I-S]LN=61;[I-E]
 //[I-S]LN=62;[I-E]
  public String getSha(String link, String token) { //[I-S]LN=63;[I-E]
    try { //[I-S]LN=64;[I-E]
      URL url = new URL(link); //[I-S]LN=65;[I-E]
 //[I-S]LN=66;[I-E]
      HttpURLConnection com = (HttpURLConnection) url.openConnection(); //[I-S]LN=67;[I-E]
      com.setRequestMethod("GET"); //[I-S]LN=68;[I-E]
      com.setRequestProperty("Authorization", "token " + token); //[I-S]LN=69;[I-E]
      com.setRequestProperty("Accept", "application/vnd.github.v3+json"); //[I-S]LN=70;[I-E]
 //[I-S]LN=71;[I-E]
      int menss = com.getResponseCode(); //[I-S]LN=72;[I-E]
      InputStream input = (menss >= 400) ? com.getErrorStream() : com.getInputStream(); //[I-S]LN=73;[I-E]
      BufferedReader reader = new BufferedReader(new InputStreamReader(input)); //[I-S]LN=74;[I-E]
      StringBuilder result = new StringBuilder(); //[I-S]LN=75;[I-E]
      String line; //[I-S]LN=76;[I-E]
      while ((line = reader.readLine()) != null) result.append(line); //[I-S]LN=77;[I-E]
      input.close(); //[I-S]LN=78;[I-E]
 //[I-S]LN=79;[I-E]
      GitPushJson json = (GitPushJson) Json.fromJson(result.toString(), GitPushJson.class, true); //[I-S]LN=80;[I-E]
 //[I-S]LN=81;[I-E]
      if (json != null && json.sha != null) return json.sha; //[I-S]LN=82;[I-E]
      else Console.log("falho o sha"); //[I-S]LN=83;[I-E]
      input.close(); //[I-S]LN=84;[I-E]
    } catch (Exception e) { //[I-S]LN=85;[I-E]
      Console.log(e); //[I-S]LN=86;[I-E]
    } //[I-S]LN=87;[I-E]
    return ""; //[I-S]LN=88;[I-E]
  } //[I-S]LN=89;[I-E]
 //[I-S]LN=90;[I-E]
  public static class GitPushJson { //[I-S]LN=91;[I-E]
    public String sha; //[I-S]LN=92;[I-E]
  }  //[I-S]LN=93;[I-E]
} //[I-S]LN=94;[I-E]
//C-R:gitPushMult
class gitPushMult { //[I-S]LN=0;[I-E]
  private gitPush gitpush; //[I-S]LN=1;[I-E]
  private String base, linkNamePasth, Commit, pasth, toke; //[I-S]LN=2;[I-E]
  private File dir; //[I-S]LN=3;[I-E]
  public void UpVariaPasth(gitPush gitpush, File dir, String base, String linkNamePasth, String Commit, String pasth, String toke) { //[I-S]LN=4;[I-E]
    this.gitpush = gitpush; //[I-S]LN=5;[I-E]
    this.base = base; //[I-S]LN=6;[I-E]
    this.linkNamePasth = linkNamePasth; //[I-S]LN=7;[I-E]
    this.Commit = Commit; //[I-S]LN=8;[I-E]
    this.pasth = pasth; //[I-S]LN=9;[I-E]
    this.toke = toke; //[I-S]LN=10;[I-E]
    this.dir = dir; //[I-S]LN=11;[I-E]
     //[I-S]LN=12;[I-E]
    new AsyncTask( //[I-S]LN=13;[I-E]
        new AsyncRunnable() { //[I-S]LN=14;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=15;[I-E]
            processFile(); //[I-S]LN=16;[I-E]
            return null; //[I-S]LN=17;[I-E]
          } //[I-S]LN=18;[I-E]
 //[I-S]LN=19;[I-E]
          public void onEngine(Object result) { //[I-S]LN=20;[I-E]
            Console.log("upload Ended"); //[I-S]LN=21;[I-E]
            Toast.showText("UpLoad the End",1); //[I-S]LN=22;[I-E]
          } //[I-S]LN=23;[I-E]
        }); //[I-S]LN=24;[I-E]
  } //[I-S]LN=25;[I-E]
 //[I-S]LN=26;[I-E]
  private void busca(File dir, List<File> resul) { //[I-S]LN=27;[I-E]
    File[] file = dir.listFiles(); //[I-S]LN=28;[I-E]
    if (file == null) return; //[I-S]LN=29;[I-E]
    for (File f : file) { //[I-S]LN=30;[I-E]
      if (f.isDirectory()) busca(f, resul); //[I-S]LN=31;[I-E]
      else resul.add(f); //[I-S]LN=32;[I-E]
    } //[I-S]LN=33;[I-E]
  } //[I-S]LN=34;[I-E]
 //[I-S]LN=35;[I-E]
  private File[] listFile(File dir) { //[I-S]LN=36;[I-E]
    List<File> resul = new ArrayList<File>(); //[I-S]LN=37;[I-E]
    busca(dir, resul); //[I-S]LN=38;[I-E]
    return resul.toArray(new File[0]); //[I-S]LN=39;[I-E]
  } //[I-S]LN=40;[I-E]
 //[I-S]LN=41;[I-E]
  private void processFile() { //[I-S]LN=42;[I-E]
    File[] file = listFile(dir); //[I-S]LN=43;[I-E]
    if (file == null) return; //[I-S]LN=44;[I-E]
    for (int i = 0; i < file.length; i++) { //[I-S]LN=45;[I-E]
      File f = file[i]; //[I-S]LN=46;[I-E]
      if (f.isDirectory()) continue; //[I-S]LN=47;[I-E]
      if (!f.getName().startsWith(".")) { //[I-S]LN=48;[I-E]
        String name = f.getAbsolutePath().replace(base, ""); //[I-S]LN=49;[I-E]
        String cominho = f.getAbsolutePath(); //[I-S]LN=50;[I-E]
        String API_Url = "https://api.github.com/repos/" + linkNamePasth + "/contents/Files/" + pasth + name + "?ref=main"; //[I-S]LN=51;[I-E]
 //[I-S]LN=52;[I-E]
        // busca o sha do file //[I-S]LN=53;[I-E]
 //[I-S]LN=54;[I-E]
        String shas = gitpush.getSha(API_Url, toke); //[I-S]LN=55;[I-E]
        gitpush.GitPush(API_Url, Commit, cominho, toke, shas); //[I-S]LN=56;[I-E]
 //[I-S]LN=57;[I-E]
        Console.log(!shas.isEmpty() ? "update" : "create"); //[I-S]LN=58;[I-E]
        Console.log("Link: " + API_Url); //[I-S]LN=59;[I-E]
      } //[I-S]LN=60;[I-E]
    }  //[I-S]LN=61;[I-E]
  } //[I-S]LN=62;[I-E]
} //[I-S]LN=63;[I-E]
//C-R:gitCloneMult
class gitCloneMult { //[I-S]LN=0;[I-E]
  private gitClone gitclone; //[I-S]LN=1;[I-E]
  private String link, token; //[I-S]LN=2;[I-E]
  private File Dir; //[I-S]LN=3;[I-E]
 //[I-S]LN=4;[I-E]
  public void gitPasthAll(gitClone gitclone, File Dir, String link, String token) { //[I-S]LN=5;[I-E]
    this.Dir = Dir; //[I-S]LN=6;[I-E]
    this.gitclone = gitclone; //[I-S]LN=7;[I-E]
    this.link = link; //[I-S]LN=8;[I-E]
    this.token = token; //[I-S]LN=9;[I-E]
    new AsyncTask( //[I-S]LN=10;[I-E]
        new AsyncRunnable() { //[I-S]LN=11;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=12;[I-E]
            processFile(); //[I-S]LN=13;[I-E]
            return null; //[I-S]LN=14;[I-E]
          } //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
          public void onEngine(Object result) { //[I-S]LN=17;[I-E]
            Console.log("Download finalizado"); //[I-S]LN=18;[I-E]
            Toast.showText("DownLoad the End", 1); //[I-S]LN=19;[I-E]
          } //[I-S]LN=20;[I-E]
        }); //[I-S]LN=21;[I-E]
  } //[I-S]LN=22;[I-E]
 //[I-S]LN=23;[I-E]
  public void processFile() { //[I-S]LN=24;[I-E]
    try { //[I-S]LN=25;[I-E]
      HttpURLConnection com = (HttpURLConnection) new URL(link).openConnection(); //[I-S]LN=26;[I-E]
      com.setRequestMethod("GET"); //[I-S]LN=27;[I-E]
      com.setRequestProperty("Authorization", "token " + token); //[I-S]LN=28;[I-E]
      com.setRequestProperty("Accept", "application/vnd.github.v3+json"); //[I-S]LN=29;[I-E]
 //[I-S]LN=30;[I-E]
      int menss = com.getResponseCode(); //[I-S]LN=31;[I-E]
      InputStream input = (menss >= 400) ? com.getErrorStream() : com.getInputStream(); //[I-S]LN=32;[I-E]
      BufferedReader reader = new BufferedReader(new InputStreamReader(input)); //[I-S]LN=33;[I-E]
      StringBuilder result = new StringBuilder(); //[I-S]LN=34;[I-E]
      String line; //[I-S]LN=35;[I-E]
      while ((line = reader.readLine()) != null) result.append(line); //[I-S]LN=36;[I-E]
      input.close(); //[I-S]LN=37;[I-E]
      com.disconnect(); //[I-S]LN=38;[I-E]
 //[I-S]LN=39;[I-E]
      FileJson(result.toString(),""); //[I-S]LN=40;[I-E]
    } catch (IOException e) { //[I-S]LN=41;[I-E]
      Console.log("erro no json: " + e.getMessage()); //[I-S]LN=42;[I-E]
    } //[I-S]LN=43;[I-E]
  } //[I-S]LN=44;[I-E]
 //[I-S]LN=45;[I-E]
  public void FileJson(String jsons, String subPath) { //[I-S]LN=46;[I-E]
    try { //[I-S]LN=47;[I-E]
      GitCloneJson[] file = (GitCloneJson[]) Json.fromJson(jsons, GitCloneJson[].class, true); //[I-S]LN=48;[I-E]
      for (GitCloneJson json : file) { //[I-S]LN=49;[I-E]
        if (json.type.equals("file")) { //[I-S]LN=50;[I-E]
          File destino = new File(Dir, subPath + "/" + json.name); //[I-S]LN=51;[I-E]
          gitclone.GitClone(json.download_url, destino.getAbsolutePath()); //[I-S]LN=52;[I-E]
          StringBuilder inforData = new StringBuilder(); //[I-S]LN=53;[I-E]
          inforData.append("{\n \"Path\" : \"").append(Dir).append("\",\n \"File\" : \"").append(destino.getAbsolutePath()).append("\",\n \"Link\" : \"").append(json.url).append("\"\n}"); //[I-S]LN=54;[I-E]
          Console.log(inforData.toString()); //[I-S]LN=55;[I-E]
          Console.log(destino.exists()?"já existe sobrescrevel":""); //[I-S]LN=56;[I-E]
           //[I-S]LN=57;[I-E]
        } else if (json.type.equals("dir") || json.type.equals("directory")) { //[I-S]LN=58;[I-E]
            String pathAll = subPath + "/" + json.name; //[I-S]LN=59;[I-E]
            File path = new File(Dir, pathAll); //[I-S]LN=60;[I-E]
            if(!path.exists()) path.mkdirs(); //[I-S]LN=61;[I-E]
             //[I-S]LN=62;[I-E]
          try { //[I-S]LN=63;[I-E]
            HttpURLConnection com = (HttpURLConnection) new URL(json.url).openConnection(); //[I-S]LN=64;[I-E]
            com.setRequestMethod("GET"); //[I-S]LN=65;[I-E]
            com.setRequestProperty("Authorization", "token " + token); //[I-S]LN=66;[I-E]
            com.setRequestProperty("Accept", "application/vnd.github.v3+json"); //[I-S]LN=67;[I-E]
 //[I-S]LN=68;[I-E]
            int menss = com.getResponseCode(); //[I-S]LN=69;[I-E]
            InputStream input = (menss >= 400) ? com.getErrorStream() : com.getInputStream(); //[I-S]LN=70;[I-E]
            BufferedReader reader = new BufferedReader(new InputStreamReader(input)); //[I-S]LN=71;[I-E]
            StringBuilder result = new StringBuilder(); //[I-S]LN=72;[I-E]
            String line; //[I-S]LN=73;[I-E]
            while ((line = reader.readLine()) != null) result.append(line); //[I-S]LN=74;[I-E]
            input.close(); //[I-S]LN=75;[I-E]
            com.disconnect(); //[I-S]LN=76;[I-E]
 //[I-S]LN=77;[I-E]
            FileJson(result.toString(),pathAll); //[I-S]LN=78;[I-E]
          } catch (Exception e) { //[I-S]LN=79;[I-E]
              Console.log("erro ao acessar a path: "+subPath+ " -->" + e.getMessage()); //[I-S]LN=80;[I-E]
          }  //[I-S]LN=81;[I-E]
        } //[I-S]LN=82;[I-E]
      } //[I-S]LN=83;[I-E]
    } catch (Exception e) { //[I-S]LN=84;[I-E]
      Console.log("erro no Download file: " + e.getMessage()); //[I-S]LN=85;[I-E]
    } //[I-S]LN=86;[I-E]
  } //[I-S]LN=87;[I-E]
 //[I-S]LN=88;[I-E]
  public static class GitCloneJson { //[I-S]LN=89;[I-E]
    public String name; //[I-S]LN=90;[I-E]
    public String url; //[I-S]LN=91;[I-E]
    public String download_url; //[I-S]LN=92;[I-E]
    public String type; //[I-S]LN=93;[I-E]
    public String sha; //[I-S]LN=94;[I-E]
  } //[I-S]LN=95;[I-E]
} //[I-S]LN=96;[I-E]
//C-R:server1
 //[I-S]LN=1;[I-E]
class server1 extends Component { //[I-S]LN=2;[I-E]
  private int port = 5000, maxPlayer = 10; //[I-S]LN=3;[I-E]
  ServerSocket server; //[I-S]LN=4;[I-E]
  @Hide public volatile boolean running = false, checktrue = false; //[I-S]LN=5;[I-E]
  private Socket[] clients = new Socket[maxPlayer]; //[I-S]LN=6;[I-E]
  private int[] clientId = new int[maxPlayer]; //[I-S]LN=7;[I-E]
  private String[] clientName = new String[maxPlayer]; //[I-S]LN=8;[I-E]
 //[I-S]LN=9;[I-E]
public   void repeat() { //[I-S]LN=10;[I-E]
    if (Input.isKeyDown("serv")) { //[I-S]LN=11;[I-E]
      if (running) stop(); //[I-S]LN=12;[I-E]
      else play(); //[I-S]LN=13;[I-E]
    } //[I-S]LN=14;[I-E]
  } //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
  private void play() { //[I-S]LN=17;[I-E]
    if (running) { //[I-S]LN=18;[I-E]
      Toast.showText("Servidor já está rodando!", 1); //[I-S]LN=19;[I-E]
      return; //[I-S]LN=20;[I-E]
    } //[I-S]LN=21;[I-E]
    running = true; //[I-S]LN=22;[I-E]
    Console.log("Iniciando servidor na porta " + port); //[I-S]LN=23;[I-E]
    Toast.showText("Iniciando servidor na porta " + port, 1); //[I-S]LN=24;[I-E]
 //[I-S]LN=25;[I-E]
    new AsyncTask( //[I-S]LN=26;[I-E]
        new AsyncRunnable() { //[I-S]LN=27;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=28;[I-E]
            try { //[I-S]LN=29;[I-E]
              server = new ServerSocket(port); //[I-S]LN=30;[I-E]
              while (running) { //[I-S]LN=31;[I-E]
                try { //[I-S]LN=32;[I-E]
                  final Socket client = server.accept(); //[I-S]LN=33;[I-E]
                  final int slot = getFreeSlot(); //[I-S]LN=34;[I-E]
                  if (slot == -1) { //[I-S]LN=35;[I-E]
                    sendClient(client, "full"); //[I-S]LN=36;[I-E]
                    client.close(); //[I-S]LN=37;[I-E]
                    continue; //[I-S]LN=38;[I-E]
                  } //[I-S]LN=39;[I-E]
                  clients[slot] = client; //[I-S]LN=40;[I-E]
                  clientId[slot] = slot + 1; //[I-S]LN=41;[I-E]
                  Console.log("Cliente conectado: " + client.getInetAddress()); //[I-S]LN=42;[I-E]
                  Toast.showText("Cliente conectado: " + client.getInetAddress(), 1); //[I-S]LN=43;[I-E]
 //[I-S]LN=44;[I-E]
                  new AsyncTask( //[I-S]LN=45;[I-E]
                      new AsyncRunnable() { //[I-S]LN=46;[I-E]
                        public Object onBackground(Object input) { //[I-S]LN=47;[I-E]
                          handleClient(slot); //[I-S]LN=48;[I-E]
                          return null; //[I-S]LN=49;[I-E]
                        } //[I-S]LN=50;[I-E]
 //[I-S]LN=51;[I-E]
                        public void onEngine(Object result) {} //[I-S]LN=52;[I-E]
                      }); //[I-S]LN=53;[I-E]
 //[I-S]LN=54;[I-E]
                } catch (SocketException se) { //[I-S]LN=55;[I-E]
                  break; //[I-S]LN=56;[I-E]
                } catch (IOException ioe) { //[I-S]LN=57;[I-E]
                  Console.log("Accept erro: " + ioe.getMessage()); //[I-S]LN=58;[I-E]
                  Toast.showText("Accept erro: " + ioe.getMessage(), 1); //[I-S]LN=59;[I-E]
                } //[I-S]LN=60;[I-E]
              } //[I-S]LN=61;[I-E]
            } catch (Exception e) { //[I-S]LN=62;[I-E]
              Console.log("Erro servidor: " + e.getMessage()); //[I-S]LN=63;[I-E]
              Toast.showText("Erro servidor: " + e.getMessage(), 1); //[I-S]LN=64;[I-E]
            } //[I-S]LN=65;[I-E]
            return null; //[I-S]LN=66;[I-E]
          } //[I-S]LN=67;[I-E]
 //[I-S]LN=68;[I-E]
          public void onEngine(Object result) {} //[I-S]LN=69;[I-E]
        }); //[I-S]LN=70;[I-E]
  } //[I-S]LN=71;[I-E]
 //[I-S]LN=72;[I-E]
  void stop() { //[I-S]LN=73;[I-E]
    if (!running) { //[I-S]LN=74;[I-E]
      Toast.showText("Servidor já está parado!", 1); //[I-S]LN=75;[I-E]
      return; //[I-S]LN=76;[I-E]
    } //[I-S]LN=77;[I-E]
    running = false; //[I-S]LN=78;[I-E]
    try { //[I-S]LN=79;[I-E]
      if (server != null && !server.isClosed()) server.close(); //[I-S]LN=80;[I-E]
    } catch (IOException e) { //[I-S]LN=81;[I-E]
      Console.log("Erro ao fechar ServerSocket: " + e.getMessage()); //[I-S]LN=82;[I-E]
    } //[I-S]LN=83;[I-E]
 //[I-S]LN=84;[I-E]
    for (int i = 0; i < maxPlayer; i++) { //[I-S]LN=85;[I-E]
      if (clients[i] != null) { //[I-S]LN=86;[I-E]
        try { //[I-S]LN=87;[I-E]
          clients[i].close(); //[I-S]LN=88;[I-E]
        } catch (Exception e) { //[I-S]LN=89;[I-E]
        } //[I-S]LN=90;[I-E]
        clients[i] = null; //[I-S]LN=91;[I-E]
        clientId[i] = 0; //[I-S]LN=92;[I-E]
        clientName[i] = null; //[I-S]LN=93;[I-E]
      } //[I-S]LN=94;[I-E]
    } //[I-S]LN=95;[I-E]
    Console.log("Servidor parado e clientes desconectados."); //[I-S]LN=96;[I-E]
    Toast.showText("Servidor parado!", 1); //[I-S]LN=97;[I-E]
  } //[I-S]LN=98;[I-E]
 //[I-S]LN=99;[I-E]
  private int getFreeSlot() { //[I-S]LN=100;[I-E]
    for (int i = 0; i < maxPlayer; i++) if (clients[i] == null) return i; //[I-S]LN=101;[I-E]
    return -1; //[I-S]LN=102;[I-E]
  } //[I-S]LN=103;[I-E]
 //[I-S]LN=104;[I-E]
  private void handleClient(int slot) { //[I-S]LN=105;[I-E]
    Socket client = clients[slot]; //[I-S]LN=106;[I-E]
    if (client == null) return; //[I-S]LN=107;[I-E]
    try { //[I-S]LN=108;[I-E]
      BufferedReader rend = new BufferedReader(new InputStreamReader(client.getInputStream(), "UTF-8")); //[I-S]LN=109;[I-E]
      String line; //[I-S]LN=110;[I-E]
      StringBuilder sbId = new StringBuilder(64), exists = new StringBuilder(64), spaw = new StringBuilder(64); //[I-S]LN=111;[I-E]
      while (running && !client.isClosed() && (line = rend.readLine()) != null) { //[I-S]LN=112;[I-E]
        if (line.startsWith("join:")) { //[I-S]LN=113;[I-E]
          sbId.setLength(0); //[I-S]LN=114;[I-E]
          String nome = line.substring(5); //[I-S]LN=115;[I-E]
          clientName[slot] = nome; //[I-S]LN=116;[I-E]
          sbId.append("id:").append(clientId[slot]); //[I-S]LN=117;[I-E]
          sendClient(client, sbId.toString()); //[I-S]LN=118;[I-E]
          for (int i = 0; i < maxPlayer; i++) { //[I-S]LN=119;[I-E]
            if (clients[slot] != null && i != slot && clientId[i] != 0 && clientName[i] != null) { //[I-S]LN=120;[I-E]
              exists.setLength(0); //[I-S]LN=121;[I-E]
              exists.append("spaw:").append(clientId[i]).append(":").append(clientName[i]).append(":0:1:0"); //[I-S]LN=122;[I-E]
              sendClient(client, exists.toString()); //[I-S]LN=123;[I-E]
            } //[I-S]LN=124;[I-E]
          } //[I-S]LN=125;[I-E]
          spaw.setLength(0); //[I-S]LN=126;[I-E]
          spaw.append("spaw:").append(clientId[slot]).append(":").append(nome).append(":0:1:0"); //[I-S]LN=127;[I-E]
          broadcast(spaw.toString(), client); //[I-S]LN=128;[I-E]
        } else if (line.startsWith("pos:") || line.startsWith("rot:") || line.startsWith("anim:")) broadcast(line, client); //[I-S]LN=129;[I-E]
        else broadcast(line, client); //[I-S]LN=130;[I-E]
      }  //[I-S]LN=131;[I-E]
    } catch (Exception e) { //[I-S]LN=132;[I-E]
      Console.log("Erro client: " + e.getMessage()); //[I-S]LN=133;[I-E]
    } finally { //[I-S]LN=134;[I-E]
      if (clientId[slot] != 0) broadcast("left:" + clientId[slot], null); //[I-S]LN=135;[I-E]
      try { //[I-S]LN=136;[I-E]
        clients[slot].close(); //[I-S]LN=137;[I-E]
      } catch (Exception e) { //[I-S]LN=138;[I-E]
      } //[I-S]LN=139;[I-E]
      clients[slot] = null; //[I-S]LN=140;[I-E]
      clientId[slot] = 0; //[I-S]LN=141;[I-E]
      clientName[slot] = null; //[I-S]LN=142;[I-E]
      Console.log("Cliente desconectado: " + slot); //[I-S]LN=143;[I-E]
    } //[I-S]LN=144;[I-E]
  } //[I-S]LN=145;[I-E]
 //[I-S]LN=146;[I-E]
  private synchronized void broadcast(String msg, Socket sender) { //[I-S]LN=147;[I-E]
    StringBuilder full = new StringBuilder(msg.length() + 1); //[I-S]LN=148;[I-E]
    full.append(msg).append("\n"); //[I-S]LN=149;[I-E]
    byte[] data; //[I-S]LN=150;[I-E]
    try { //[I-S]LN=151;[I-E]
      data = full.toString().getBytes("UTF-8"); //[I-S]LN=152;[I-E]
    } catch (Exception e) { //[I-S]LN=153;[I-E]
      data = full.toString().getBytes(); //[I-S]LN=154;[I-E]
    } //[I-S]LN=155;[I-E]
    for (int i = 0; i < maxPlayer; i++) { //[I-S]LN=156;[I-E]
      Socket s = clients[i]; //[I-S]LN=157;[I-E]
      if (s == null || s.isClosed()) { //[I-S]LN=158;[I-E]
        clients[i] = null; //[I-S]LN=159;[I-E]
        clientId[i] = 0; //[I-S]LN=160;[I-E]
        clientName[i] = null; //[I-S]LN=161;[I-E]
        continue; //[I-S]LN=162;[I-E]
      } //[I-S]LN=163;[I-E]
      if (sender != null && s.equals(sender)) continue; //[I-S]LN=164;[I-E]
 //[I-S]LN=165;[I-E]
      try { //[I-S]LN=166;[I-E]
        OutputStream out = s.getOutputStream(); //[I-S]LN=167;[I-E]
        out.write(data); //[I-S]LN=168;[I-E]
        out.flush(); //[I-S]LN=169;[I-E]
      } catch (Exception e) { //[I-S]LN=170;[I-E]
        Console.log("Erro broadcast: " + e.getMessage()); //[I-S]LN=171;[I-E]
        try { //[I-S]LN=172;[I-E]
          s.close(); //[I-S]LN=173;[I-E]
        } catch (Exception es) { //[I-S]LN=174;[I-E]
        } //[I-S]LN=175;[I-E]
        clients[i] = null; //[I-S]LN=176;[I-E]
        clientId[i] = 0; //[I-S]LN=177;[I-E]
        clientName[i] = null; //[I-S]LN=178;[I-E]
      } //[I-S]LN=179;[I-E]
    } //[I-S]LN=180;[I-E]
  } //[I-S]LN=181;[I-E]
 //[I-S]LN=182;[I-E]
  private void sendClient(Socket s, String msg) { //[I-S]LN=183;[I-E]
    try { //[I-S]LN=184;[I-E]
      StringBuilder sb = new StringBuilder(msg.length() + 1); //[I-S]LN=185;[I-E]
      sb.append(msg).append("\n"); //[I-S]LN=186;[I-E]
      OutputStream out = s.getOutputStream(); //[I-S]LN=187;[I-E]
      out.write(sb.toString().getBytes("UTF-8")); //[I-S]LN=188;[I-E]
      out.flush(); //[I-S]LN=189;[I-E]
    } catch (Exception e) { //[I-S]LN=190;[I-E]
    } //[I-S]LN=191;[I-E]
  } //[I-S]LN=192;[I-E]
} //[I-S]LN=193;[I-E]
//C-R:criente1
 //[I-S]LN=3;[I-E]
class criente1 extends Component { //[I-S]LN=4;[I-E]
  private String host = "", msg = "", nome; //[I-S]LN=5;[I-E]
  private int port = 5000, maxPlayer = 10, myId = 0; //[I-S]LN=6;[I-E]
  private Socket socket; //[I-S]LN=7;[I-E]
  private volatile boolean connected = false; //[I-S]LN=8;[I-E]
  private SpatialObject localPlayer; //[I-S]LN=9;[I-E]
  public ObjectFile localplay, amigo; //[I-S]LN=10;[I-E]
 //[I-S]LN=11;[I-E]
  private int[] remoteId; //[I-S]LN=12;[I-E]
  private String[] remoteName; //[I-S]LN=13;[I-E]
  private SpatialObject[] remotePlay; //[I-S]LN=14;[I-E]
  private Vector3Buffer posCache, rotCache, posBufferCache, rotBufferCache; //[I-S]LN=15;[I-E]
  private IntBuffer animCache, dirCache, animBufferCache, dirBufferCache; //[I-S]LN=16;[I-E]
  private Queue<Runnable> queue = new ConcurrentLinkedQueue<Runnable>(); //[I-S]LN=17;[I-E]
 //[I-S]LN=18;[I-E]
  private SUIText txt; //[I-S]LN=19;[I-E]
  private server1 checkServe; //[I-S]LN=20;[I-E]
  private handleProtocolo protocolo = new handleProtocolo(); //[I-S]LN=21;[I-E]
  private animAmigo animRemoto = new animAmigo(); //[I-S]LN=22;[I-E]
 //[I-S]LN=23;[I-E]
  public Texture[] sprite = new Texture[3]; //[I-S]LN=24;[I-E]
 //[I-S]LN=25;[I-E]
public   void start() { //[I-S]LN=26;[I-E]
    if (maxPlayer <= 0) maxPlayer = 10; //[I-S]LN=27;[I-E]
    remoteId = new int[maxPlayer]; //[I-S]LN=28;[I-E]
    remoteName = new String[maxPlayer]; //[I-S]LN=29;[I-E]
    remotePlay = new SpatialObject[maxPlayer]; //[I-S]LN=30;[I-E]
    posCache = BufferUtils.createVector3Buffer(maxPlayer); //[I-S]LN=31;[I-E]
    rotCache = BufferUtils.createVector3Buffer(maxPlayer); //[I-S]LN=32;[I-E]
    animCache = BufferUtils.createIntBuffer(maxPlayer); //[I-S]LN=33;[I-E]
    dirCache = BufferUtils.createIntBuffer(maxPlayer); //[I-S]LN=34;[I-E]
    posBufferCache = BufferUtils.createVector3Buffer(maxPlayer); //[I-S]LN=35;[I-E]
    rotBufferCache = BufferUtils.createVector3Buffer(maxPlayer); //[I-S]LN=36;[I-E]
    animBufferCache = BufferUtils.createIntBuffer(maxPlayer); //[I-S]LN=37;[I-E]
    dirBufferCache = BufferUtils.createIntBuffer(maxPlayer); //[I-S]LN=38;[I-E]
    txt = WorldController.findObject("Ip").findComponent("suitext"); //[I-S]LN=39;[I-E]
    checkServe = myObject.findComponent("server1"); //[I-S]LN=40;[I-E]
  } //[I-S]LN=41;[I-E]
 //[I-S]LN=42;[I-E]
public   void repeat() { //[I-S]LN=43;[I-E]
    Runnable r; //[I-S]LN=44;[I-E]
    while ((r = queue.poll()) != null) r.run(); //[I-S]LN=45;[I-E]
    for (int i = 0; i < maxPlayer; i++) { //[I-S]LN=46;[I-E]
      if (remotePlay[i] != null && remoteId[i] != 0) { //[I-S]LN=47;[I-E]
        float px = posCache.getX(i), py = posCache.getY(i), pz = posCache.getZ(i); //[I-S]LN=48;[I-E]
        float rx = rotCache.getX(i), ry = rotCache.getY(i), rz = rotCache.getZ(i); //[I-S]LN=49;[I-E]
        remotePlay[i].setPosition(px, py, pz); //[I-S]LN=50;[I-E]
        remotePlay[i].setRotation(rx, ry, rz); //[I-S]LN=51;[I-E]
        int anim = animCache.get(i), dir = dirCache.get(i); //[I-S]LN=52;[I-E]
        int preanim = animBufferCache.get(i), predir = dirBufferCache.get(i); //[I-S]LN=53;[I-E]
        if (anim != preanim || dir != predir) animRemoto.PlayAnimation(remotePlay[i], sprite[0], anim, dir); //[I-S]LN=54;[I-E]
      }  //[I-S]LN=55;[I-E]
    } //[I-S]LN=56;[I-E]
    swap(); //[I-S]LN=57;[I-E]
    if (Input.isKeyDown("serv") && !checkServe.running) { //[I-S]LN=58;[I-E]
      InputDialog inputN = //[I-S]LN=59;[I-E]
          new InputDialog( //[I-S]LN=60;[I-E]
              "nome usuario", //[I-S]LN=61;[I-E]
              "", //[I-S]LN=62;[I-E]
              "exit", //[I-S]LN=63;[I-E]
              "ok", //[I-S]LN=64;[I-E]
              new InputDialogListener() { //[I-S]LN=65;[I-E]
                public void onFinish(String t) { //[I-S]LN=66;[I-E]
                  nome = t; //[I-S]LN=67;[I-E]
                  host = "localhost"; //[I-S]LN=68;[I-E]
                  connect(); //[I-S]LN=69;[I-E]
                } //[I-S]LN=70;[I-E]
 //[I-S]LN=71;[I-E]
                public void onCancel() {} //[I-S]LN=72;[I-E]
              }); //[I-S]LN=73;[I-E]
    } //[I-S]LN=74;[I-E]
    if (Input.isKeyDown("IP")) { //[I-S]LN=75;[I-E]
      InputDialog inputV = //[I-S]LN=76;[I-E]
          new InputDialog( //[I-S]LN=77;[I-E]
              "connect ao servidor", //[I-S]LN=78;[I-E]
              "", //[I-S]LN=79;[I-E]
              "sair", //[I-S]LN=80;[I-E]
              "connect", //[I-S]LN=81;[I-E]
              new InputDialogListener() { //[I-S]LN=82;[I-E]
                public void onFinish(String t) { //[I-S]LN=83;[I-E]
                  host = t; //[I-S]LN=84;[I-E]
                  txt.setText("IP: " + t); //[I-S]LN=85;[I-E]
                  connect(); //[I-S]LN=86;[I-E]
                } //[I-S]LN=87;[I-E]
 //[I-S]LN=88;[I-E]
                public void onCancel() {} //[I-S]LN=89;[I-E]
              }); //[I-S]LN=90;[I-E]
      if (nome == null || nome.isEmpty()) { //[I-S]LN=91;[I-E]
        InputDialog inputN = //[I-S]LN=92;[I-E]
            new InputDialog( //[I-S]LN=93;[I-E]
                "nome usuario", //[I-S]LN=94;[I-E]
                "", //[I-S]LN=95;[I-E]
                "exit", //[I-S]LN=96;[I-E]
                "ok", //[I-S]LN=97;[I-E]
                new InputDialogListener() { //[I-S]LN=98;[I-E]
                  public void onFinish(String t) { //[I-S]LN=99;[I-E]
                    nome = t; //[I-S]LN=100;[I-E]
                    txt.setText("nome: " + t); //[I-S]LN=101;[I-E]
                  } //[I-S]LN=102;[I-E]
 //[I-S]LN=103;[I-E]
                  public void onCancel() {} //[I-S]LN=104;[I-E]
                }); //[I-S]LN=105;[I-E]
      } //[I-S]LN=106;[I-E]
    } //[I-S]LN=107;[I-E]
  } //[I-S]LN=108;[I-E]
 //[I-S]LN=109;[I-E]
  void connect() { //[I-S]LN=110;[I-E]
    if (connected) { //[I-S]LN=111;[I-E]
      Toast.showText("Já conectado", 1); //[I-S]LN=112;[I-E]
      return; //[I-S]LN=113;[I-E]
    } //[I-S]LN=114;[I-E]
 //[I-S]LN=115;[I-E]
    new AsyncTask( //[I-S]LN=116;[I-E]
        new AsyncRunnable() { //[I-S]LN=117;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=118;[I-E]
            try { //[I-S]LN=119;[I-E]
              socket = new Socket(host, port); //[I-S]LN=120;[I-E]
              connected = true; //[I-S]LN=121;[I-E]
              OutputStream out = socket.getOutputStream(); //[I-S]LN=122;[I-E]
              out.write(("join:" + nome + "\n").getBytes("UTF-8")); //[I-S]LN=123;[I-E]
              out.flush(); //[I-S]LN=124;[I-E]
 //[I-S]LN=125;[I-E]
              return "Conectado ao servidor"; //[I-S]LN=126;[I-E]
            } catch (Exception e) { //[I-S]LN=127;[I-E]
              return "Erro conectar: " + e.getMessage(); //[I-S]LN=128;[I-E]
            } //[I-S]LN=129;[I-E]
          } //[I-S]LN=130;[I-E]
 //[I-S]LN=131;[I-E]
          public void onEngine(Object result) { //[I-S]LN=132;[I-E]
            String msgResult = (String) result; //[I-S]LN=133;[I-E]
            Toast.showText(msgResult, 1); //[I-S]LN=134;[I-E]
            Console.log(msgResult); //[I-S]LN=135;[I-E]
            if (connected) { //[I-S]LN=136;[I-E]
              txt.setText("IP: " + socket.getInetAddress().getHostAddress()); //[I-S]LN=137;[I-E]
              startListening(); //[I-S]LN=138;[I-E]
            } //[I-S]LN=139;[I-E]
          } //[I-S]LN=140;[I-E]
        }); //[I-S]LN=141;[I-E]
  } //[I-S]LN=142;[I-E]
 //[I-S]LN=143;[I-E]
  private void runOnMain(Runnable r) { //[I-S]LN=144;[I-E]
    queue.add(r); //[I-S]LN=145;[I-E]
  } //[I-S]LN=146;[I-E]
 //[I-S]LN=147;[I-E]
  private void startListening() { //[I-S]LN=148;[I-E]
    new AsyncTask( //[I-S]LN=149;[I-E]
        new AsyncRunnable() { //[I-S]LN=150;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=151;[I-E]
            try { //[I-S]LN=152;[I-E]
              BufferedReader rend = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8")); //[I-S]LN=153;[I-E]
              String line; //[I-S]LN=154;[I-E]
 //[I-S]LN=155;[I-E]
              while (connected && (line = rend.readLine()) != null) { //[I-S]LN=156;[I-E]
                processServ(line); //[I-S]LN=157;[I-E]
              } //[I-S]LN=158;[I-E]
            } catch (Exception e) { //[I-S]LN=159;[I-E]
              return "Erro cliente: " + e.getMessage(); //[I-S]LN=160;[I-E]
            } //[I-S]LN=161;[I-E]
            return null; //[I-S]LN=162;[I-E]
          } //[I-S]LN=163;[I-E]
 //[I-S]LN=164;[I-E]
          public void onEngine(Object result) { //[I-S]LN=165;[I-E]
            if (result != null && connected) Console.log(result.toString()); //[I-S]LN=166;[I-E]
          } //[I-S]LN=167;[I-E]
        }); //[I-S]LN=168;[I-E]
  } //[I-S]LN=169;[I-E]
 //[I-S]LN=170;[I-E]
  private void processServ(String txt) { //[I-S]LN=171;[I-E]
    if (txt.startsWith("id:")) { //[I-S]LN=172;[I-E]
      myId = Integer.parseInt(txt.substring(3)); //[I-S]LN=173;[I-E]
      runOnMain( //[I-S]LN=174;[I-E]
          new Runnable() { public void run() { //[I-S]LN=175;[I-E]
                    if (localPlayer == null) { //[I-S]LN=176;[I-E]
                      localPlayer = myObject.instantiate(localplay); //[I-S]LN=177;[I-E]
                      localPlayer.setPosition(0, 1, 0); //[I-S]LN=178;[I-E]
                      localPlayer.setName(nome); //[I-S]LN=179;[I-E]
                    } //[I-S]LN=180;[I-E]
                    new AsyncTask( //[I-S]LN=181;[I-E]
                        new AsyncRunnable() { //[I-S]LN=182;[I-E]
                          public Object onBackground(Object input) { //[I-S]LN=183;[I-E]
                            try { //[I-S]LN=184;[I-E]
                              StringBuilder sb = new StringBuilder(); //[I-S]LN=185;[I-E]
                              OutputStream out = socket.getOutputStream(); //[I-S]LN=186;[I-E]
                              while (connected && socket != null && !socket.isClosed()) { //[I-S]LN=187;[I-E]
                                sb.setLength(0); //[I-S]LN=188;[I-E]
                                Vector3 pos = localPlayer.getPosition(); //[I-S]LN=189;[I-E]
                                Quaternion rot = localPlayer.getRotation(); //[I-S]LN=190;[I-E]
                                moveVision mv = localPlayer.findComponent("moveVision"); //[I-S]LN=191;[I-E]
                                int anim = 0, dir = 0; //[I-S]LN=192;[I-E]
                                if (mv != null) { //[I-S]LN=193;[I-E]
                                  anim = mv.getAnim(); //[I-S]LN=194;[I-E]
                                  dir = mv.getAnimFC(); //[I-S]LN=195;[I-E]
                                } //[I-S]LN=196;[I-E]
sb.append("pos:").append(myId).append(":").append(pos.getX()).append(":").append(pos.getY()).append(":").append(pos.getZ()).append("\n"); //[I-S]LN=197;[I-E]
sb.append("rot:").append(myId).append(":").append(rot.getX()).append(":").append(rot.getY()).append(":").append(rot.getZ()).append("\n"); //[I-S]LN=198;[I-E]
                                sb.append("anim:").append(myId).append(":").append(anim).append(":").append(dir).append("\n"); //[I-S]LN=199;[I-E]
                                out.write(sb.toString().getBytes("UTF-8")); //[I-S]LN=200;[I-E]
                                out.flush(); //[I-S]LN=201;[I-E]
                                Thread.sleep(50); //[I-S]LN=202;[I-E]
                              } //[I-S]LN=203;[I-E]
                            } catch (Exception e) { //[I-S]LN=204;[I-E]
                              desconnect(); //[I-S]LN=205;[I-E]
                            } //[I-S]LN=206;[I-E]
                            return null; //[I-S]LN=207;[I-E]
                          } //[I-S]LN=208;[I-E]
         //[I-S]LN=209;[I-E]
                          public void onEngine(Object result) {} //[I-S]LN=210;[I-E]
                        }); //[I-S]LN=211;[I-E]
         }}); //[I-S]LN=212;[I-E]
 //[I-S]LN=213;[I-E]
    } else if (txt.startsWith("spaw:")) { //[I-S]LN=214;[I-E]
      handleSpawn(txt); //[I-S]LN=215;[I-E]
    } else if (txt.startsWith("pos:")) { //[I-S]LN=216;[I-E]
      protocolo.handlePos(txt, myId, posCache, remoteId, maxPlayer); //[I-S]LN=217;[I-E]
    } else if (txt.startsWith("rot:")) { //[I-S]LN=218;[I-E]
      protocolo.handleRot(txt, myId, rotCache, remoteId, maxPlayer); //[I-S]LN=219;[I-E]
    } else if (txt.startsWith("anim:")) { //[I-S]LN=220;[I-E]
      protocolo.handleAnim(txt, myId, animCache, animBufferCache, remoteId, maxPlayer); //[I-S]LN=221;[I-E]
    } else if (txt.startsWith("left:")) { //[I-S]LN=222;[I-E]
      handleLeft(txt); //[I-S]LN=223;[I-E]
    } else { //[I-S]LN=224;[I-E]
      Toast.showText(txt, 1); //[I-S]LN=225;[I-E]
      Console.log(txt); //[I-S]LN=226;[I-E]
    } //[I-S]LN=227;[I-E]
  } //[I-S]LN=228;[I-E]
 //[I-S]LN=229;[I-E]
  private void handleSpawn(String txt) { //[I-S]LN=230;[I-E]
    String[] p = txt.split(":"); //[I-S]LN=231;[I-E]
    final int id = Integer.parseInt(p[1]); //[I-S]LN=232;[I-E]
    if (id == myId) return; //[I-S]LN=233;[I-E]
 //[I-S]LN=234;[I-E]
    int slot = -1; //[I-S]LN=235;[I-E]
    for (int i = 0; i < maxPlayer; i++) { //[I-S]LN=236;[I-E]
      if (remoteId[i] == 0) { //[I-S]LN=237;[I-E]
        slot = i; //[I-S]LN=238;[I-E]
        break; //[I-S]LN=239;[I-E]
      } //[I-S]LN=240;[I-E]
    } //[I-S]LN=241;[I-E]
    if (slot == -1) return; //[I-S]LN=242;[I-E]
    final int tmpslot = slot; //[I-S]LN=243;[I-E]
    final String nomplayer = p[2]; //[I-S]LN=244;[I-E]
    final float x = Float.parseFloat(p[3]); //[I-S]LN=245;[I-E]
    final float y = Float.parseFloat(p[4]); //[I-S]LN=246;[I-E]
    final float z = Float.parseFloat(p[5]); //[I-S]LN=247;[I-E]
    runOnMain( //[I-S]LN=248;[I-E]
        new Runnable() { public void run() { //[I-S]LN=249;[I-E]
                  if (remotePlay[tmpslot] == null) { //[I-S]LN=250;[I-E]
                    remotePlay[tmpslot] = myObject.instantiate(amigo); //[I-S]LN=251;[I-E]
                    remotePlay[tmpslot].setName(nomplayer); //[I-S]LN=252;[I-E]
                  } //[I-S]LN=253;[I-E]
                  remotePlay[tmpslot].setPosition(x, y, z); //[I-S]LN=254;[I-E]
                  remoteId[tmpslot] = id; //[I-S]LN=255;[I-E]
                  remoteName[tmpslot] = nomplayer; //[I-S]LN=256;[I-E]
                  Toast.showText(nomplayer + " entrou", 1); //[I-S]LN=257;[I-E]
         }}); //[I-S]LN=258;[I-E]
  } //[I-S]LN=259;[I-E]
 //[I-S]LN=260;[I-E]
  private void handleLeft(String txt) { //[I-S]LN=261;[I-E]
    String[] p = txt.split(":"); //[I-S]LN=262;[I-E]
    final int id = Integer.parseInt(p[1]); //[I-S]LN=263;[I-E]
    runOnMain( //[I-S]LN=264;[I-E]
        new Runnable() { public void run() { //[I-S]LN=265;[I-E]
                  for (int is = 0; is < maxPlayer; is++) { //[I-S]LN=266;[I-E]
                    if (remoteId[is] == id) { //[I-S]LN=267;[I-E]
                      if (remotePlay[is] != null) { //[I-S]LN=268;[I-E]
                        remotePlay[is].destroy(); //[I-S]LN=269;[I-E]
                      } //[I-S]LN=270;[I-E]
                      Toast.showText(remoteName[is] + " saiu!", 1); //[I-S]LN=271;[I-E]
                      remotePlay[is] = null; //[I-S]LN=272;[I-E]
                      remoteId[is] = 0; //[I-S]LN=273;[I-E]
                      remoteName[is] = null; //[I-S]LN=274;[I-E]
                      break; //[I-S]LN=275;[I-E]
                    } //[I-S]LN=276;[I-E]
                  } //[I-S]LN=277;[I-E]
         }}); //[I-S]LN=278;[I-E]
  } //[I-S]LN=279;[I-E]
 //[I-S]LN=280;[I-E]
  void desconnect() { //[I-S]LN=281;[I-E]
    connected = false; //[I-S]LN=282;[I-E]
    try { //[I-S]LN=283;[I-E]
      if (socket != null && !socket.isClosed()) socket.close(); //[I-S]LN=284;[I-E]
      nome = null; //[I-S]LN=285;[I-E]
    } catch (Exception e) { //[I-S]LN=286;[I-E]
      Toast.showText("Desconnect", 1); //[I-S]LN=287;[I-E]
    } //[I-S]LN=288;[I-E]
  } //[I-S]LN=289;[I-E]
 //[I-S]LN=290;[I-E]
  private void swap() { //[I-S]LN=291;[I-E]
    Vector3Buffer tmpPos = posCache, tmpRot = rotCache; //[I-S]LN=292;[I-E]
    IntBuffer tmpanim = animCache; //[I-S]LN=293;[I-E]
    posCache = posBufferCache; //[I-S]LN=294;[I-E]
    posBufferCache = tmpPos; //[I-S]LN=295;[I-E]
    rotCache = rotBufferCache; //[I-S]LN=296;[I-E]
    rotBufferCache = tmpRot; //[I-S]LN=297;[I-E]
    animCache = animBufferCache; //[I-S]LN=298;[I-E]
    animBufferCache = tmpanim; //[I-S]LN=299;[I-E]
  } //[I-S]LN=300;[I-E]
} //[I-S]LN=301;[I-E]
//C-R:handleProtocolo
class handleProtocolo { //[I-S]LN=0;[I-E]
  public void handleRot(String txt, int myId, Vector3Buffer rotBufferCache, int[] remoteId, int maxPlayer) { //[I-S]LN=1;[I-E]
    String[] p = txt.split(":"); //[I-S]LN=2;[I-E]
    int id = Integer.parseInt(p[1]); //[I-S]LN=3;[I-E]
    if (id == myId) return; //[I-S]LN=4;[I-E]
    float x = Float.parseFloat(p[2]); //[I-S]LN=5;[I-E]
    float y = Float.parseFloat(p[3]); //[I-S]LN=6;[I-E]
    float z = Float.parseFloat(p[4]); //[I-S]LN=7;[I-E]
 //[I-S]LN=8;[I-E]
    for (int i = 0; i < maxPlayer; i++) { //[I-S]LN=9;[I-E]
      if (remoteId[i] == id) { //[I-S]LN=10;[I-E]
        rotBufferCache.set(i, x, y, z); //[I-S]LN=11;[I-E]
        break; //[I-S]LN=12;[I-E]
      } //[I-S]LN=13;[I-E]
    } //[I-S]LN=14;[I-E]
  } //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
  public void handlePos(String txt, int myId, Vector3Buffer posBufferCache, int[] remoteId, int maxPlayer) { //[I-S]LN=17;[I-E]
    String[] p = txt.split(":"); //[I-S]LN=18;[I-E]
    int id = Integer.parseInt(p[1]); //[I-S]LN=19;[I-E]
    if (id == myId) return; //[I-S]LN=20;[I-E]
    float x = Float.parseFloat(p[2]); //[I-S]LN=21;[I-E]
    float y = Float.parseFloat(p[3]); //[I-S]LN=22;[I-E]
    float z = Float.parseFloat(p[4]); //[I-S]LN=23;[I-E]
 //[I-S]LN=24;[I-E]
    for (int i = 0; i < maxPlayer; i++) { //[I-S]LN=25;[I-E]
      if (remoteId[i] == id) { //[I-S]LN=26;[I-E]
        posBufferCache.set(i, x, y, z); //[I-S]LN=27;[I-E]
        break; //[I-S]LN=28;[I-E]
      } //[I-S]LN=29;[I-E]
    } //[I-S]LN=30;[I-E]
  } //[I-S]LN=31;[I-E]
 //[I-S]LN=32;[I-E]
  public void handleAnim(String txt, int myId, IntBuffer animBufferCache, IntBuffer dirBufferCache, int[] remoteId, int maxPlayer) { //[I-S]LN=33;[I-E]
    String[] p = txt.split(":"); //[I-S]LN=34;[I-E]
    int id = Integer.parseInt(p[1]); //[I-S]LN=35;[I-E]
    if (id == myId) return; //[I-S]LN=36;[I-E]
    int anim = Integer.parseInt(p[2]); //[I-S]LN=37;[I-E]
    int dir = Integer.parseInt(p[3]); //[I-S]LN=38;[I-E]
 //[I-S]LN=39;[I-E]
    for (int i = 0; i < maxPlayer; i++) { //[I-S]LN=40;[I-E]
      if (remoteId[i] == id) { //[I-S]LN=41;[I-E]
        animBufferCache.put(i, anim); //[I-S]LN=42;[I-E]
        dirBufferCache.put(i, dir); //[I-S]LN=43;[I-E]
        break; //[I-S]LN=44;[I-E]
      }  //[I-S]LN=45;[I-E]
    } //[I-S]LN=46;[I-E]
  } //[I-S]LN=47;[I-E]
} //[I-S]LN=48;[I-E]
//C-R:animAmigo
class animAmigo { //[I-S]LN=0;[I-E]
  public void PlayAnimation(SpatialObject obj, Texture sprite, int animX, int animY) { //[I-S]LN=1;[I-E]
    if (obj == null || sprite == null) return; //[I-S]LN=2;[I-E]
    ModelRenderer model = obj.findComponent("ModelRenderer"); //[I-S]LN=3;[I-E]
if (model != null && model.getMaterial() != null) { //[I-S]LN=4;[I-E]
model.getMaterial().setAlbedo(sprite); //[I-S]LN=5;[I-E]
      atlas(model, animX, animY); //[I-S]LN=6;[I-E]
    }  //[I-S]LN=7;[I-E]
  } //[I-S]LN=8;[I-E]
 //[I-S]LN=9;[I-E]
  private void atlas(ModelRenderer model, int x, int y) { //[I-S]LN=10;[I-E]
model.getMaterial().setVector2("AlbedoOffset", new Vector2(x * .329f, y * .3348f)); //[I-S]LN=11;[I-E]
model.getMaterial().setVector2("AlbedoTilling", new Vector2(0.333333f, .333333f)); //[I-S]LN=12;[I-E]
  } //[I-S]LN=13;[I-E]
} //[I-S]LN=14;[I-E]