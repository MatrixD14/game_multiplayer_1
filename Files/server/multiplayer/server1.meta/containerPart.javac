package JAVARuntime;

import java.net.Socket; //[I-S]LN=0;[I-E]
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.text.*;
import java.net.*;
import java.math.*;
import java.io.*;
import java.nio.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:server1
 //[I-S]LN=1;[I-E]
class server1 extends Component { //[I-S]LN=2;[I-E]
  private int port = 5000, maxPlayer = 10; //[I-S]LN=3;[I-E]
  ServerSocket server; //[I-S]LN=4;[I-E]
  @Hide public volatile boolean running = false, checktrue = false; //[I-S]LN=5;[I-E]
  private Socket[] clients = new Socket[maxPlayer]; //[I-S]LN=6;[I-E]
  private int[] clientId = new int[maxPlayer]; //[I-S]LN=7;[I-E]
  private String[] clientName = new String[maxPlayer]; //[I-S]LN=8;[I-E]
  private int geraSeed; //[I-S]LN=9;[I-E]
 //[I-S]LN=10;[I-E]
public   void repeat() { //[I-S]LN=11;[I-E]
    if (Input.isKeyDown("serv")) { //[I-S]LN=12;[I-E]
      if (running) stop(); //[I-S]LN=13;[I-E]
      else play(); //[I-S]LN=14;[I-E]
    } //[I-S]LN=15;[I-E]
  } //[I-S]LN=16;[I-E]
 //[I-S]LN=17;[I-E]
  private void play() { //[I-S]LN=18;[I-E]
    geraSeed = Random.range(100, 999); //[I-S]LN=19;[I-E]
    if (running) { //[I-S]LN=20;[I-E]
      Toast.showText("Servidor j치 est치 rodando!", 1); //[I-S]LN=21;[I-E]
      return; //[I-S]LN=22;[I-E]
    } //[I-S]LN=23;[I-E]
    running = true; //[I-S]LN=24;[I-E]
    Console.log("Iniciando servidor na porta " + port); //[I-S]LN=25;[I-E]
    Toast.showText("Iniciando servidor na porta " + port, 1); //[I-S]LN=26;[I-E]
 //[I-S]LN=27;[I-E]
    new AsyncTask( //[I-S]LN=28;[I-E]
        new AsyncRunnable() { //[I-S]LN=29;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=30;[I-E]
            try { //[I-S]LN=31;[I-E]
              server = new ServerSocket(port); //[I-S]LN=32;[I-E]
              while (running) { //[I-S]LN=33;[I-E]
                try { //[I-S]LN=34;[I-E]
                  final Socket client = server.accept(); //[I-S]LN=35;[I-E]
                  final int slot = getFreeSlot(); //[I-S]LN=36;[I-E]
                  if (slot == -1) { //[I-S]LN=37;[I-E]
                    sendClient(client, "full"); //[I-S]LN=38;[I-E]
                    client.close(); //[I-S]LN=39;[I-E]
                    continue; //[I-S]LN=40;[I-E]
                  } //[I-S]LN=41;[I-E]
                  clients[slot] = client; //[I-S]LN=42;[I-E]
                  clientId[slot] = slot + 1; //[I-S]LN=43;[I-E]
                  Console.log("Cliente conectado: " + client.getInetAddress()); //[I-S]LN=44;[I-E]
                  Toast.showText("Cliente conectado: " + client.getInetAddress(), 1); //[I-S]LN=45;[I-E]
 //[I-S]LN=46;[I-E]
                  new AsyncTask( //[I-S]LN=47;[I-E]
                      new AsyncRunnable() { //[I-S]LN=48;[I-E]
                        public Object onBackground(Object input) { //[I-S]LN=49;[I-E]
                          handleClient(slot); //[I-S]LN=50;[I-E]
                          return null; //[I-S]LN=51;[I-E]
                        } //[I-S]LN=52;[I-E]
 //[I-S]LN=53;[I-E]
                        public void onEngine(Object result) {} //[I-S]LN=54;[I-E]
                      }); //[I-S]LN=55;[I-E]
 //[I-S]LN=56;[I-E]
                } catch (SocketException se) { //[I-S]LN=57;[I-E]
                  break; //[I-S]LN=58;[I-E]
                } catch (IOException ioe) { //[I-S]LN=59;[I-E]
                  Console.log("Accept erro: " + ioe.getMessage()); //[I-S]LN=60;[I-E]
                  Toast.showText("Accept erro: " + ioe.getMessage(), 1); //[I-S]LN=61;[I-E]
                } //[I-S]LN=62;[I-E]
              } //[I-S]LN=63;[I-E]
            } catch (Exception e) { //[I-S]LN=64;[I-E]
              Console.log("Erro servidor: " + e.getMessage()); //[I-S]LN=65;[I-E]
              Toast.showText("Erro servidor: " + e.getMessage(), 1); //[I-S]LN=66;[I-E]
            } //[I-S]LN=67;[I-E]
            return null; //[I-S]LN=68;[I-E]
          } //[I-S]LN=69;[I-E]
 //[I-S]LN=70;[I-E]
          public void onEngine(Object result) {} //[I-S]LN=71;[I-E]
        }); //[I-S]LN=72;[I-E]
  } //[I-S]LN=73;[I-E]
 //[I-S]LN=74;[I-E]
  void stop() { //[I-S]LN=75;[I-E]
    if (!running) { //[I-S]LN=76;[I-E]
      Toast.showText("Servidor j치 est치 parado!", 1); //[I-S]LN=77;[I-E]
      return; //[I-S]LN=78;[I-E]
    } //[I-S]LN=79;[I-E]
    running = false; //[I-S]LN=80;[I-E]
    try { //[I-S]LN=81;[I-E]
      if (server != null && !server.isClosed()) server.close(); //[I-S]LN=82;[I-E]
    } catch (IOException e) { //[I-S]LN=83;[I-E]
      Console.log("Erro ao fechar ServerSocket: " + e.getMessage()); //[I-S]LN=84;[I-E]
    } //[I-S]LN=85;[I-E]
 //[I-S]LN=86;[I-E]
    for (int i = 0; i < maxPlayer; i++) { //[I-S]LN=87;[I-E]
      if (clients[i] != null) { //[I-S]LN=88;[I-E]
        try { //[I-S]LN=89;[I-E]
          clients[i].close(); //[I-S]LN=90;[I-E]
        } catch (Exception e) { //[I-S]LN=91;[I-E]
        } //[I-S]LN=92;[I-E]
        clients[i] = null; //[I-S]LN=93;[I-E]
        clientId[i] = 0; //[I-S]LN=94;[I-E]
        clientName[i] = null; //[I-S]LN=95;[I-E]
      } //[I-S]LN=96;[I-E]
    } //[I-S]LN=97;[I-E]
    Console.log("Servidor parado e clientes desconectados."); //[I-S]LN=98;[I-E]
    Toast.showText("Servidor parado!", 1); //[I-S]LN=99;[I-E]
  } //[I-S]LN=100;[I-E]
 //[I-S]LN=101;[I-E]
  private int getFreeSlot() { //[I-S]LN=102;[I-E]
    for (int i = 0; i < maxPlayer; i++) if (clients[i] == null) return i; //[I-S]LN=103;[I-E]
    return -1; //[I-S]LN=104;[I-E]
  } //[I-S]LN=105;[I-E]
 //[I-S]LN=106;[I-E]
  private void handleClient(int slot) { //[I-S]LN=107;[I-E]
    Socket client = clients[slot]; //[I-S]LN=108;[I-E]
    if (client == null) return; //[I-S]LN=109;[I-E]
    try { //[I-S]LN=110;[I-E]
      BufferedReader rend = new BufferedReader(new InputStreamReader(client.getInputStream(), "UTF-8")); //[I-S]LN=111;[I-E]
      String line; //[I-S]LN=112;[I-E]
      StringBuilder sbId = new StringBuilder(64), exists = new StringBuilder(64), spaw = new StringBuilder(64); //[I-S]LN=113;[I-E]
      while (running && !client.isClosed() && (line = rend.readLine()) != null) { //[I-S]LN=114;[I-E]
        if (line.startsWith("join:")) { //[I-S]LN=115;[I-E]
          sbId.setLength(0); //[I-S]LN=116;[I-E]
          String nome = line.substring(5); //[I-S]LN=117;[I-E]
          clientName[slot] = nome; //[I-S]LN=118;[I-E]
          sbId.append("id:").append(clientId[slot]); //[I-S]LN=119;[I-E]
          sendClient(client, sbId.toString()); //[I-S]LN=120;[I-E]
          spaw.setLength(0); //[I-S]LN=121;[I-E]
          spaw.append("seed:0:").append(geraSeed); //[I-S]LN=122;[I-E]
          sendClient(client, spaw.toString()); //[I-S]LN=123;[I-E]
          for (int i = 0; i < maxPlayer; i++) { //[I-S]LN=124;[I-E]
            if (clients[i] != null && i != slot && clientId[i] != 0 && clientName[i] != null) { //[I-S]LN=125;[I-E]
              exists.setLength(0); //[I-S]LN=126;[I-E]
              exists.append("spaw:").append(clientId[i]).append(":").append(clientName[i]).append(":0:1:0"); //[I-S]LN=127;[I-E]
              sendClient(client, exists.toString()); //[I-S]LN=128;[I-E]
            } //[I-S]LN=129;[I-E]
          }  //[I-S]LN=130;[I-E]
          spaw.setLength(0); //[I-S]LN=131;[I-E]
          spaw.append("spaw:").append(clientId[slot]).append(":").append(nome).append(":0:1:0"); //[I-S]LN=132;[I-E]
          broadcast(spaw.toString(), client); //[I-S]LN=133;[I-E]
          spaw.setLength(0); //[I-S]LN=134;[I-E]
          spaw.append("seed:0:").append(geraSeed); //[I-S]LN=135;[I-E]
          broadcast(spaw.toString(), null); //[I-S]LN=136;[I-E]
        } else if (line.startsWith("pos:") || line.startsWith("rot:")) broadcast(line, client); //[I-S]LN=137;[I-E]
        else broadcast(line, client); //[I-S]LN=138;[I-E]
      } //[I-S]LN=139;[I-E]
    } catch (Exception e) { //[I-S]LN=140;[I-E]
      Console.log("Erro client: " + e.getMessage()); //[I-S]LN=141;[I-E]
    } finally { //[I-S]LN=142;[I-E]
      if (clientId[slot] != 0) broadcast("left:" + clientId[slot], null); //[I-S]LN=143;[I-E]
      try { //[I-S]LN=144;[I-E]
        clients[slot].close(); //[I-S]LN=145;[I-E]
      } catch (Exception e) { //[I-S]LN=146;[I-E]
      } //[I-S]LN=147;[I-E]
      clients[slot] = null; //[I-S]LN=148;[I-E]
      clientId[slot] = 0; //[I-S]LN=149;[I-E]
      clientName[slot] = null; //[I-S]LN=150;[I-E]
      Console.log("Cliente desconectado: " + slot); //[I-S]LN=151;[I-E]
    } //[I-S]LN=152;[I-E]
  } //[I-S]LN=153;[I-E]
 //[I-S]LN=154;[I-E]
  private synchronized void broadcast(String msg, Socket sender) { //[I-S]LN=155;[I-E]
    StringBuilder full = new StringBuilder(msg.length() + 1); //[I-S]LN=156;[I-E]
    full.append(msg).append("\n"); //[I-S]LN=157;[I-E]
    byte[] data; //[I-S]LN=158;[I-E]
    try { //[I-S]LN=159;[I-E]
      data = full.toString().getBytes("UTF-8"); //[I-S]LN=160;[I-E]
    } catch (Exception e) { //[I-S]LN=161;[I-E]
      data = full.toString().getBytes(); //[I-S]LN=162;[I-E]
    } //[I-S]LN=163;[I-E]
    for (int i = 0; i < maxPlayer; i++) { //[I-S]LN=164;[I-E]
      Socket s = clients[i]; //[I-S]LN=165;[I-E]
      if (s == null || s.isClosed()) { //[I-S]LN=166;[I-E]
        clients[i] = null; //[I-S]LN=167;[I-E]
        clientId[i] = 0; //[I-S]LN=168;[I-E]
        clientName[i] = null; //[I-S]LN=169;[I-E]
        continue; //[I-S]LN=170;[I-E]
      } //[I-S]LN=171;[I-E]
      if (sender != null && s.equals(sender)) continue; //[I-S]LN=172;[I-E]
 //[I-S]LN=173;[I-E]
      try { //[I-S]LN=174;[I-E]
        OutputStream out = s.getOutputStream(); //[I-S]LN=175;[I-E]
        out.write(data); //[I-S]LN=176;[I-E]
        out.flush(); //[I-S]LN=177;[I-E]
      } catch (Exception e) { //[I-S]LN=178;[I-E]
        Console.log("Erro broadcast: " + e.getMessage()); //[I-S]LN=179;[I-E]
        try { //[I-S]LN=180;[I-E]
          s.close(); //[I-S]LN=181;[I-E]
        } catch (Exception es) { //[I-S]LN=182;[I-E]
        } //[I-S]LN=183;[I-E]
        clients[i] = null; //[I-S]LN=184;[I-E]
        clientId[i] = 0; //[I-S]LN=185;[I-E]
        clientName[i] = null; //[I-S]LN=186;[I-E]
      } //[I-S]LN=187;[I-E]
    } //[I-S]LN=188;[I-E]
  } //[I-S]LN=189;[I-E]
 //[I-S]LN=190;[I-E]
  private void sendClient(Socket s, String msg) { //[I-S]LN=191;[I-E]
    try { //[I-S]LN=192;[I-E]
      StringBuilder sb = new StringBuilder(msg.length() + 1); //[I-S]LN=193;[I-E]
      sb.append(msg).append("\n"); //[I-S]LN=194;[I-E]
      OutputStream out = s.getOutputStream(); //[I-S]LN=195;[I-E]
      out.write(sb.toString().getBytes("UTF-8")); //[I-S]LN=196;[I-E]
      out.flush(); //[I-S]LN=197;[I-E]
    } catch (Exception e) { //[I-S]LN=198;[I-E]
    } //[I-S]LN=199;[I-E]
  } //[I-S]LN=200;[I-E]
} //[I-S]LN=201;[I-E]