import java.net.Socket; //[I-S]LN=0;[I-E]
 //[I-S]LN=1;[I-E]
class server extends Component { //[I-S]LN=2;[I-E]
 //[I-S]LN=3;[I-E]
  int port = 5000; //[I-S]LN=4;[I-E]
  ServerSocket server; //[I-S]LN=5;[I-E]
  volatile boolean running = false, checktrue = false; //[I-S]LN=6;[I-E]
  Vector<Socket> clients = new Vector<Socket>(); //[I-S]LN=7;[I-E]
 //[I-S]LN=8;[I-E]
  public PropertiesButton start_server = //[I-S]LN=9;[I-E]
      new PropertiesButton( //[I-S]LN=10;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=11;[I-E]
            void onClicked() { //[I-S]LN=12;[I-E]
              play(); //[I-S]LN=13;[I-E]
            } //[I-S]LN=14;[I-E]
          }); //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
  public PropertiesButton stop_server = //[I-S]LN=17;[I-E]
      new PropertiesButton( //[I-S]LN=18;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=19;[I-E]
            void onClicked() { //[I-S]LN=20;[I-E]
              stop(); //[I-S]LN=21;[I-E]
            } //[I-S]LN=22;[I-E]
          }); //[I-S]LN=23;[I-E]
 //[I-S]LN=24;[I-E]
  void repeat() { //[I-S]LN=25;[I-E]
    if (Input.isKeyDown("serv")) { //[I-S]LN=26;[I-E]
      if (running) stop(); //[I-S]LN=27;[I-E]
      else play(); //[I-S]LN=28;[I-E]
    } //[I-S]LN=29;[I-E]
  } //[I-S]LN=30;[I-E]
 //[I-S]LN=31;[I-E]
  private void play() { //[I-S]LN=32;[I-E]
    if (running) { //[I-S]LN=33;[I-E]
      Toast.showText("Servidor já está rodando!", 1); //[I-S]LN=34;[I-E]
      return; //[I-S]LN=35;[I-E]
    } //[I-S]LN=36;[I-E]
    running = true; //[I-S]LN=37;[I-E]
    Console.log("Iniciando servidor na porta " + port); //[I-S]LN=38;[I-E]
    Toast.showText("Iniciando servidor na porta " + port, 1); //[I-S]LN=39;[I-E]
 //[I-S]LN=40;[I-E]
    new AsyncTask( //[I-S]LN=41;[I-E]
        new AsyncRunnable() { //[I-S]LN=42;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=43;[I-E]
            try { //[I-S]LN=44;[I-E]
              server = new ServerSocket(port); //[I-S]LN=45;[I-E]
              while (running) { //[I-S]LN=46;[I-E]
                try { //[I-S]LN=47;[I-E]
                  final Socket client = server.accept(); //[I-S]LN=48;[I-E]
                  clients.add(client); //[I-S]LN=49;[I-E]
                  Console.log("Cliente conectado: " + client.getInetAddress()); //[I-S]LN=50;[I-E]
                  Toast.showText("Cliente conectado: " + client.getInetAddress(), 1); //[I-S]LN=51;[I-E]
 //[I-S]LN=52;[I-E]
                  // cada cliente é tratado em uma tarefa separada //[I-S]LN=53;[I-E]
                  new AsyncTask( //[I-S]LN=54;[I-E]
                      new AsyncRunnable() { //[I-S]LN=55;[I-E]
                        public Object onBackground(Object input) { //[I-S]LN=56;[I-E]
                          handleClient(client); //[I-S]LN=57;[I-E]
                          return null; //[I-S]LN=58;[I-E]
                        } //[I-S]LN=59;[I-E]
 //[I-S]LN=60;[I-E]
                        public void onEngine(Object result) {} //[I-S]LN=61;[I-E]
                      }); //[I-S]LN=62;[I-E]
 //[I-S]LN=63;[I-E]
                } catch (SocketException se) { //[I-S]LN=64;[I-E]
                  // ServerSocket foi fechado (stop chamado) //[I-S]LN=65;[I-E]
                  break; //[I-S]LN=66;[I-E]
                } catch (IOException ioe) { //[I-S]LN=67;[I-E]
                  Console.log("Accept erro: " + ioe.getMessage()); //[I-S]LN=68;[I-E]
                  Toast.showText("Accept erro: " + ioe.getMessage(), 1); //[I-S]LN=69;[I-E]
                } //[I-S]LN=70;[I-E]
              } //[I-S]LN=71;[I-E]
            } catch (Exception e) { //[I-S]LN=72;[I-E]
              Console.log("Erro servidor: " + e.getMessage()); //[I-S]LN=73;[I-E]
              Toast.showText("Erro servidor: " + e.getMessage(), 1); //[I-S]LN=74;[I-E]
            } //[I-S]LN=75;[I-E]
            return null; //[I-S]LN=76;[I-E]
          } //[I-S]LN=77;[I-E]
 //[I-S]LN=78;[I-E]
          public void onEngine(Object result) {}  //[I-S]LN=79;[I-E]
        }); //[I-S]LN=80;[I-E]
  } //[I-S]LN=81;[I-E]
 //[I-S]LN=82;[I-E]
  void stop() { //[I-S]LN=83;[I-E]
    if (!running) { //[I-S]LN=84;[I-E]
      Toast.showText("Servidor já está parado!", 1); //[I-S]LN=85;[I-E]
      return; //[I-S]LN=86;[I-E]
    } //[I-S]LN=87;[I-E]
    running = false; //[I-S]LN=88;[I-E]
    try { //[I-S]LN=89;[I-E]
      if (server != null && !server.isClosed()) server.close(); //[I-S]LN=90;[I-E]
    } catch (IOException e) { //[I-S]LN=91;[I-E]
      Console.log("Erro ao fechar ServerSocket: " + e.getMessage()); //[I-S]LN=92;[I-E]
    } //[I-S]LN=93;[I-E]
 //[I-S]LN=94;[I-E]
    // fecha todos os clientes conectados //[I-S]LN=95;[I-E]
    for (int i = clients.size() - 1; i >= 0; i--) { //[I-S]LN=96;[I-E]
      Socket s = clients.get(i); //[I-S]LN=97;[I-E]
      try { //[I-S]LN=98;[I-E]
        s.close(); //[I-S]LN=99;[I-E]
      } catch (Exception e) { //[I-S]LN=100;[I-E]
      } //[I-S]LN=101;[I-E]
      clients.remove(i); //[I-S]LN=102;[I-E]
    } //[I-S]LN=103;[I-E]
 //[I-S]LN=104;[I-E]
    Console.log("Servidor parado e clientes desconectados."); //[I-S]LN=105;[I-E]
    Toast.showText("Servidor parado!", 1); //[I-S]LN=106;[I-E]
  } //[I-S]LN=107;[I-E]
 //[I-S]LN=108;[I-E]
  private void handleClient(Socket client) { //[I-S]LN=109;[I-E]
    InputStream in = null; //[I-S]LN=110;[I-E]
    try { //[I-S]LN=111;[I-E]
      in = client.getInputStream(); //[I-S]LN=112;[I-E]
      byte[] buffer = new byte[1024]; //[I-S]LN=113;[I-E]
      StringBuilder sb = new StringBuilder(); //[I-S]LN=114;[I-E]
      int read; //[I-S]LN=115;[I-E]
 //[I-S]LN=116;[I-E]
      while (running && !client.isClosed() && (read = in.read(buffer)) != -1) { //[I-S]LN=117;[I-E]
        sb.append(new String(buffer, 0, read, "UTF-8")); //[I-S]LN=118;[I-E]
        int idx; //[I-S]LN=119;[I-E]
        // processa todas as mensagens completas terminadas em '\n' //[I-S]LN=120;[I-E]
        while ((idx = sb.indexOf("\n")) != -1) { //[I-S]LN=121;[I-E]
          String msg = sb.substring(0, idx); //[I-S]LN=122;[I-E]
          sb.delete(0, idx + 1); //[I-S]LN=123;[I-E]
 //[I-S]LN=124;[I-E]
          Console.log("Recebido de " + client.getInetAddress() + ": " + msg); //[I-S]LN=125;[I-E]
          // reenvia para os outros clientes (não envia de volta para o remetente) //[I-S]LN=126;[I-E]
          broadcast(msg, client); //[I-S]LN=127;[I-E]
        } //[I-S]LN=128;[I-E]
      } //[I-S]LN=129;[I-E]
    } catch (Exception e) { //[I-S]LN=130;[I-E]
      Console.log("Erro client: " + e.getMessage()); //[I-S]LN=131;[I-E]
    } finally { //[I-S]LN=132;[I-E]
      // remove e fecha //[I-S]LN=133;[I-E]
      try { //[I-S]LN=134;[I-E]
        client.close(); //[I-S]LN=135;[I-E]
      } catch (Exception e) { //[I-S]LN=136;[I-E]
      } //[I-S]LN=137;[I-E]
      clients.remove(client); //[I-S]LN=138;[I-E]
      Console.log("Cliente desconectado: " + client.getInetAddress()); //[I-S]LN=139;[I-E]
    } //[I-S]LN=140;[I-E]
  } //[I-S]LN=141;[I-E]
 //[I-S]LN=142;[I-E]
  // reenvia msg para todos exceto sender (se sender == null envia para todos) //[I-S]LN=143;[I-E]
  private void broadcast(String msg, Socket sender) { //[I-S]LN=144;[I-E]
    //String full = (sender == null ? "" : sender.getInetAddress().toString() + ": ") + msg + "\n"; //[I-S]LN=145;[I-E]
    String full = msg + "\n"; //[I-S]LN=146;[I-E]
    byte[] data; //[I-S]LN=147;[I-E]
    try { //[I-S]LN=148;[I-E]
      data = full.getBytes("UTF-8"); //[I-S]LN=149;[I-E]
    } catch (Exception e) { //[I-S]LN=150;[I-E]
      data = full.getBytes(); //[I-S]LN=151;[I-E]
    } //[I-S]LN=152;[I-E]
 //[I-S]LN=153;[I-E]
    // itera sobre a lista (Vector é sincronizado) //[I-S]LN=154;[I-E]
    for (int i = 0; i < clients.size(); i++) { //[I-S]LN=155;[I-E]
      Socket s = clients.get(i); //[I-S]LN=156;[I-E]
      if (s == null) continue; //[I-S]LN=157;[I-E]
      if (s.isClosed()) { //[I-S]LN=158;[I-E]
        clients.remove(i); //[I-S]LN=159;[I-E]
        i--; //[I-S]LN=160;[I-E]
        continue; //[I-S]LN=161;[I-E]
      } //[I-S]LN=162;[I-E]
      // não manda de volta para o remetente //[I-S]LN=163;[I-E]
      if (sender != null && s.equals(sender)) continue; //[I-S]LN=164;[I-E]
 //[I-S]LN=165;[I-E]
      try { //[I-S]LN=166;[I-E]
        OutputStream out = s.getOutputStream(); //[I-S]LN=167;[I-E]
        out.write(data); //[I-S]LN=168;[I-E]
        out.flush(); //[I-S]LN=169;[I-E]
      } catch (Exception e) { //[I-S]LN=170;[I-E]
        // cliente com problema — remove //[I-S]LN=171;[I-E]
        try { //[I-S]LN=172;[I-E]
          s.close(); //[I-S]LN=173;[I-E]
        } catch (Exception ex) { //[I-S]LN=174;[I-E]
        } //[I-S]LN=175;[I-E]
        clients.remove(i); //[I-S]LN=176;[I-E]
        i--; //[I-S]LN=177;[I-E]
      } //[I-S]LN=178;[I-E]
    } //[I-S]LN=179;[I-E]
  } //[I-S]LN=180;[I-E]
} //[I-S]LN=181;[I-E]