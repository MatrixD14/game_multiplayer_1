package JAVARuntime;

import java.net.Socket; //[I-S]LN=0;[I-E]
import java.io.InputStream; //[I-S]LN=1;[I-E]
import java.io.OutputStream; //[I-S]LN=2;[I-E]
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.text.*;
import java.net.*;
import java.math.*;
import java.io.*;
import java.nio.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:criente
 //[I-S]LN=3;[I-E]
class criente extends Component { //[I-S]LN=4;[I-E]
  String host = "", msg = "", nome; //[I-S]LN=5;[I-E]
  int port = 5000; //[I-S]LN=6;[I-E]
  Socket socket; //[I-S]LN=7;[I-E]
  volatile boolean connected = false, mssg = false; //[I-S]LN=8;[I-E]
  private SUIText txt, txts, mymsg; //[I-S]LN=9;[I-E]
  private List<String> history = new ArrayList<String>(); //[I-S]LN=10;[I-E]
  private server checkServe; //[I-S]LN=11;[I-E]
 //[I-S]LN=12;[I-E]
  public PropertiesButton connectBtn = //[I-S]LN=13;[I-E]
      new PropertiesButton( //[I-S]LN=14;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=15;[I-E]
public             void onClicked() { //[I-S]LN=16;[I-E]
              connect(); //[I-S]LN=17;[I-E]
            } //[I-S]LN=18;[I-E]
          }); //[I-S]LN=19;[I-E]
 //[I-S]LN=20;[I-E]
  public PropertiesButton sendBtn = //[I-S]LN=21;[I-E]
      new PropertiesButton( //[I-S]LN=22;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=23;[I-E]
public             void onClicked() { //[I-S]LN=24;[I-E]
              send(msg); //[I-S]LN=25;[I-E]
            } //[I-S]LN=26;[I-E]
          }); //[I-S]LN=27;[I-E]
 //[I-S]LN=28;[I-E]
public   void start() { //[I-S]LN=29;[I-E]
    txt = WorldController.findObject("msgs").findComponent("suitext"); //[I-S]LN=30;[I-E]
    txts = WorldController.findObject("Ip").findComponent("suitext"); //[I-S]LN=31;[I-E]
    mymsg = WorldController.findObject("mymsg").findComponent("suitext"); //[I-S]LN=32;[I-E]
    checkServe = myObject.findComponent("server"); //[I-S]LN=33;[I-E]
  }  //[I-S]LN=34;[I-E]
 //[I-S]LN=35;[I-E]
public   void repeat() { //[I-S]LN=36;[I-E]
    if (Input.isKeyDown("serv") && checkServe.running) { //[I-S]LN=37;[I-E]
      InputDialog inputN = //[I-S]LN=38;[I-E]
          new InputDialog( //[I-S]LN=39;[I-E]
              "nome usuario", //[I-S]LN=40;[I-E]
              "", //[I-S]LN=41;[I-E]
              "exit", //[I-S]LN=42;[I-E]
              "ok", //[I-S]LN=43;[I-E]
              new InputDialogListener() { //[I-S]LN=44;[I-E]
                public void onFinish(String t) { //[I-S]LN=45;[I-E]
                  nome = t; //[I-S]LN=46;[I-E]
                  host = "localhost"; //[I-S]LN=47;[I-E]
                  connect(); //[I-S]LN=48;[I-E]
                  txts.setText("IP: "+socket.getLocalAddress().getHostAddress()); //[I-S]LN=49;[I-E]
                } //[I-S]LN=50;[I-E]
 //[I-S]LN=51;[I-E]
                public void onCancel() {} //[I-S]LN=52;[I-E]
              }); //[I-S]LN=53;[I-E]
    } //[I-S]LN=54;[I-E]
    if (Input.isKeyDown("IP")) { //[I-S]LN=55;[I-E]
      InputDialog inputV = //[I-S]LN=56;[I-E]
          new InputDialog( //[I-S]LN=57;[I-E]
              "connect ao servidor", //[I-S]LN=58;[I-E]
              "", //[I-S]LN=59;[I-E]
              "sair", //[I-S]LN=60;[I-E]
              "connect", //[I-S]LN=61;[I-E]
              new InputDialogListener() { //[I-S]LN=62;[I-E]
                public void onFinish(String t) { //[I-S]LN=63;[I-E]
                  host = t; //[I-S]LN=64;[I-E]
                  txts.setText("IP: " + t); //[I-S]LN=65;[I-E]
                  connect(); //[I-S]LN=66;[I-E]
                } //[I-S]LN=67;[I-E]
 //[I-S]LN=68;[I-E]
                public void onCancel() {} //[I-S]LN=69;[I-E]
              }); //[I-S]LN=70;[I-E]
      if (!nome.isEmpty() || StringOperations.equals(nome ,  "")) { //[I-S]LN=71;[I-E]
        InputDialog inputN = //[I-S]LN=72;[I-E]
            new InputDialog( //[I-S]LN=73;[I-E]
                "nome usuario", //[I-S]LN=74;[I-E]
                "", //[I-S]LN=75;[I-E]
                "exit", //[I-S]LN=76;[I-E]
                "ok", //[I-S]LN=77;[I-E]
                new InputDialogListener() { //[I-S]LN=78;[I-E]
                  public void onFinish(String t) { //[I-S]LN=79;[I-E]
                    nome = t; //[I-S]LN=80;[I-E]
                    txts.setText("nome: " + t); //[I-S]LN=81;[I-E]
                  } //[I-S]LN=82;[I-E]
 //[I-S]LN=83;[I-E]
                  public void onCancel() {} //[I-S]LN=84;[I-E]
                }); //[I-S]LN=85;[I-E]
      } //[I-S]LN=86;[I-E]
    } //[I-S]LN=87;[I-E]
    if (!connected && Input.isKeyDown("msg")) { //[I-S]LN=88;[I-E]
      Toast.showText("não connect", 1); //[I-S]LN=89;[I-E]
      return; //[I-S]LN=90;[I-E]
    } //[I-S]LN=91;[I-E]
    if (Input.isKeyDown("msg")) mssg = !mssg; //[I-S]LN=92;[I-E]
    if (mssg) Input.addKeyboardRequest(this); //[I-S]LN=93;[I-E]
    else Input.removeKeyboardRequest(this); //[I-S]LN=94;[I-E]
 //[I-S]LN=95;[I-E]
    for (KeyboardButton key : Input.keyboard.getDownButtons()) { //[I-S]LN=96;[I-E]
      String name = key.getName(); //[I-S]LN=97;[I-E]
      if (name.equals("del")) msg = ""; //[I-S]LN=98;[I-E]
      else if (!name.equals("enter")) msg += name; //[I-S]LN=99;[I-E]
    } //[I-S]LN=100;[I-E]
 //[I-S]LN=101;[I-E]
    mymsg.setText(msg); //[I-S]LN=102;[I-E]
 //[I-S]LN=103;[I-E]
    if (Input.keyboard.isKeyDown("enter") && !msg.isEmpty()) { //[I-S]LN=104;[I-E]
      send(msg); //[I-S]LN=105;[I-E]
      msg = ""; //[I-S]LN=106;[I-E]
      mssg = false; //[I-S]LN=107;[I-E]
    } //[I-S]LN=108;[I-E]
  } //[I-S]LN=109;[I-E]
 //[I-S]LN=110;[I-E]
  private void addMessage(String message) { //[I-S]LN=111;[I-E]
    history.add(message); //[I-S]LN=112;[I-E]
    if (history.size() > 5) history.remove(0); //[I-S]LN=113;[I-E]
    StringBuilder sb = new StringBuilder(); //[I-S]LN=114;[I-E]
    for (String s : history) sb.append(s).append("\n"); //[I-S]LN=115;[I-E]
    txt.setText(sb.toString()); //[I-S]LN=116;[I-E]
  } //[I-S]LN=117;[I-E]
 //[I-S]LN=118;[I-E]
  void connect() { //[I-S]LN=119;[I-E]
    if (connected) { //[I-S]LN=120;[I-E]
      Toast.showText("Já conectado", 1); //[I-S]LN=121;[I-E]
      return; //[I-S]LN=122;[I-E]
    } //[I-S]LN=123;[I-E]
 //[I-S]LN=124;[I-E]
    new AsyncTask( //[I-S]LN=125;[I-E]
        new AsyncRunnable() { //[I-S]LN=126;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=127;[I-E]
            try { //[I-S]LN=128;[I-E]
              socket = new Socket(host, port); //[I-S]LN=129;[I-E]
              connected = true; //[I-S]LN=130;[I-E]
 //[I-S]LN=131;[I-E]
              // notifica conexão na engine //[I-S]LN=132;[I-E]
              return "Conectado ao servidor"; //[I-S]LN=133;[I-E]
 //[I-S]LN=134;[I-E]
              // loop de leitura ficará em outro AsyncTask //[I-S]LN=135;[I-E]
            } catch (Exception e) { //[I-S]LN=136;[I-E]
              return "Erro conectar: " + e.getMessage(); //[I-S]LN=137;[I-E]
            } //[I-S]LN=138;[I-E]
          } //[I-S]LN=139;[I-E]
 //[I-S]LN=140;[I-E]
          public void onEngine(Object result) { //[I-S]LN=141;[I-E]
            String msgResult = (String) result; //[I-S]LN=142;[I-E]
            Toast.showText(msgResult, 1); //[I-S]LN=143;[I-E]
            Console.log(msgResult); //[I-S]LN=144;[I-E]
 //[I-S]LN=145;[I-E]
            // se conectado, iniciar escuta do servidor //[I-S]LN=146;[I-E]
            if (connected) startListening(); //[I-S]LN=147;[I-E]
          } //[I-S]LN=148;[I-E]
        }); //[I-S]LN=149;[I-E]
  } //[I-S]LN=150;[I-E]
 //[I-S]LN=151;[I-E]
  private void startListening() { //[I-S]LN=152;[I-E]
    new AsyncTask( //[I-S]LN=153;[I-E]
        new AsyncRunnable() { //[I-S]LN=154;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=155;[I-E]
            try { //[I-S]LN=156;[I-E]
              InputStream in = socket.getInputStream(); //[I-S]LN=157;[I-E]
              byte[] buffer = new byte[1024]; //[I-S]LN=158;[I-E]
              StringBuilder sb = new StringBuilder(); //[I-S]LN=159;[I-E]
              int read; //[I-S]LN=160;[I-E]
 //[I-S]LN=161;[I-E]
              while (connected && (read = in.read(buffer)) != -1) { //[I-S]LN=162;[I-E]
                sb.append(new String(buffer, 0, read, "UTF-8")); //[I-S]LN=163;[I-E]
                int idx; //[I-S]LN=164;[I-E]
                while ((idx = sb.indexOf("\n")) != -1) { //[I-S]LN=165;[I-E]
                  String msg = sb.substring(0, idx); //[I-S]LN=166;[I-E]
                  sb.delete(0, idx + 1); //[I-S]LN=167;[I-E]
                  // retorna cada mensagem para onEngine //[I-S]LN=168;[I-E]
                  Thread.sleep(1); // evita flood //[I-S]LN=169;[I-E]
                  return msg; //[I-S]LN=170;[I-E]
                } //[I-S]LN=171;[I-E]
              } //[I-S]LN=172;[I-E]
            } catch (Exception e) { //[I-S]LN=173;[I-E]
              return "Erro cliente: " + e.getMessage(); //[I-S]LN=174;[I-E]
            } //[I-S]LN=175;[I-E]
            return null; //[I-S]LN=176;[I-E]
          } //[I-S]LN=177;[I-E]
 //[I-S]LN=178;[I-E]
          public void onEngine(Object result) { //[I-S]LN=179;[I-E]
            if (result != null && connected) { //[I-S]LN=180;[I-E]
              String message = (String) result; //[I-S]LN=181;[I-E]
              addMessage(message); //[I-S]LN=182;[I-E]
              // chama novamente para continuar escutando //[I-S]LN=183;[I-E]
              startListening(); //[I-S]LN=184;[I-E]
            } //[I-S]LN=185;[I-E]
          } //[I-S]LN=186;[I-E]
        }); //[I-S]LN=187;[I-E]
  } //[I-S]LN=188;[I-E]
 //[I-S]LN=189;[I-E]
  void send(String texts) { //[I-S]LN=190;[I-E]
    final String text = nome + ": " + texts; //[I-S]LN=191;[I-E]
    if (!connected || socket == null || socket.isClosed()) { //[I-S]LN=192;[I-E]
      Toast.showText("Não conectado", 1); //[I-S]LN=193;[I-E]
      return; //[I-S]LN=194;[I-E]
    } //[I-S]LN=195;[I-E]
 //[I-S]LN=196;[I-E]
    new AsyncTask( //[I-S]LN=197;[I-E]
        new AsyncRunnable() { //[I-S]LN=198;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=199;[I-E]
            try { //[I-S]LN=200;[I-E]
              OutputStream out = socket.getOutputStream(); //[I-S]LN=201;[I-E]
              out.write((text + "\n").getBytes("UTF-8")); //[I-S]LN=202;[I-E]
              out.flush(); //[I-S]LN=203;[I-E]
            } catch (Exception e) { //[I-S]LN=204;[I-E]
              connected = false; //[I-S]LN=205;[I-E]
              return "Erro enviar: " + e.getMessage(); //[I-S]LN=206;[I-E]
            } //[I-S]LN=207;[I-E]
            return null; //[I-S]LN=208;[I-E]
          } //[I-S]LN=209;[I-E]
 //[I-S]LN=210;[I-E]
          public void onEngine(Object result) { //[I-S]LN=211;[I-E]
            if (result != null) { //[I-S]LN=212;[I-E]
              Toast.showText((String) result, 1); //[I-S]LN=213;[I-E]
              Console.log((String) result); //[I-S]LN=214;[I-E]
            } //[I-S]LN=215;[I-E]
          } //[I-S]LN=216;[I-E]
        }); //[I-S]LN=217;[I-E]
  } //[I-S]LN=218;[I-E]
} //[I-S]LN=219;[I-E]